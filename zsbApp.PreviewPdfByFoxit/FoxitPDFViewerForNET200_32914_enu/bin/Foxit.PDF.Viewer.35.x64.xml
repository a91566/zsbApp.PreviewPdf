<?xml version="1.0"?>
<doc>
    <assembly>
        "Foxit.PDF.Viewer"
    </assembly>
    <members>
        <member name="P:Foxit.PDF.Viewer.LaunchAction.FilePath">
            <summary>
Gets the file path of the document associated with the link action.
</summary>
        </member>
        <member name="T:Foxit.PDF.Viewer.LaunchAction">
            <summary>
Specifies the <b>Launch</b> action type for the link.
</summary>
            <licensing>
This class is a Foxit PDF Viewer feature. The following license is required for non-evaluation usage:
<list type="bullet"><item>Foxit PDF Viewer for .NET SDK</item></list></licensing>
        </member>
        <member name="P:Foxit.PDF.Viewer.RemoteGoToAction.FilePath">
            <summary>
Gets the file path of the document associated with the link action.
</summary>
        </member>
        <member name="T:Foxit.PDF.Viewer.RemoteGoToAction">
            <summary>
Specifies the <b>RemoteGoTo</b> action type for the link.
</summary>
            <licensing>
This class is a Foxit PDF Viewer feature. The following license is required for non-evaluation usage:
<list type="bullet"><item>Foxit PDF Viewer for .NET SDK</item></list></licensing>
        </member>
        <member name="P:Foxit.PDF.Viewer.URIAction.URIpath">
            <summary>
Gets the Universal Resource Identifier, including web pages and other Internet based resources. 
</summary>
        </member>
        <member name="T:Foxit.PDF.Viewer.URIAction">
            <summary>
Specifies the <b>URI</b> action type for the link.
</summary>
            <licensing>
This class is a Foxit PDF Viewer feature. The following license is required for non-evaluation usage:
<list type="bullet"><item>Foxit PDF Viewer for .NET SDK</item></list></licensing>
        </member>
        <member name="P:Foxit.PDF.Viewer.GoToAction.PageNumber">
            <summary>
Gets the destination page number associated with the link action.
</summary>
        </member>
        <member name="T:Foxit.PDF.Viewer.GoToAction">
            <summary>
Specifies the <b>GoTo</b> action type for the link.
</summary>
            <licensing>
This class is a Foxit PDF Viewer feature. The following license is required for non-evaluation usage:
<list type="bullet"><item>Foxit PDF Viewer for .NET SDK</item></list></licensing>
        </member>
        <member name="F:Foxit.PDF.Viewer.PdfToolStripItems.Find">
            <summary>
Represents a name for Findtext button.
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.PdfToolStripItems.TwoPageContinuous">
            <summary>
Represents a name for Twopage continuous button.
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.PdfToolStripItems.TwoPage">
            <summary>
Represents a name for Twopage button.
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.PdfToolStripItems.SingleContinuous">
            <summary>
Represents a name for Singlepage continuous button.
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.PdfToolStripItems.SinglePage">
            <summary>
Represents a name for Singlepage button.
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.PdfToolStripItems.RotateCounterClockwise">
            <summary>
Represents a name for RotateCounterClockwise button
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.PdfToolStripItems.RotateClockwise">
            <summary>
Represents a name for RotateClockwise.
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.PdfToolStripItems.ZoomOut">
            <summary>
Represents a name for ZoomOut button.
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.PdfToolStripItems.ZoomIn">
            <summary>
Represents a name for ZoomIn button.
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.PdfToolStripItems.ZoomLevels">
            <summary>
Represents a name for Different Zoomlevels
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.PdfToolStripItems.ZoomValueTextBox">
            <summary>
Represents a name for Zoomvalue textbox
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.PdfToolStripItems.MarqueeZoom">
            <summary>
Represents a name for Marqueezoom button.
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.PdfToolStripItems.TextSelect">
            <summary>
Represents a name for Textselect mode button.
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.PdfToolStripItems.Pan">
            <summary>
Represents a name for Pan mode button
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.PdfToolStripItems.NextView">
            <summary>
Represents a name for Next view
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.PdfToolStripItems.PreviousView">
            <summary>
Represents a name for Previous view
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.PdfToolStripItems.TotalPages">
            <summary>
Represents a name for Total pages.
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.PdfToolStripItems.PageNumberTextBox">
            <summary>
Represents a name for Pagenumber textbox
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.PdfToolStripItems.LastPage">
            <summary>
Represents a name for Lastpage button
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.PdfToolStripItems.NextPage">
            <summary>
Represents a name for Nextpage button.
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.PdfToolStripItems.PreviousPage">
            <summary>
Represents a name Preivouspage button.
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.PdfToolStripItems.FirstPage">
            <summary>
Represents a name for Firstpage button.
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.PdfToolStripItems.PrintButton">
            <summary>
Represents a name for Print button.
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.PdfToolStripItems.OpenFile">
            <summary>
Represents a name for Openfile button.
</summary>
        </member>
        <member name="T:Foxit.PDF.Viewer.PdfToolStripItems">
            <summary>
Represents the PdfToolStrip Items.
</summary>
            <example>This example demonstrates names of PdfToolStrip items <see cref="T:Foxit.PDF.Viewer.PdfToolStrip" /> using <see cref="T:Foxit.PDF.Viewer.PdfToolStripItems" />.<p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports Foxit.PDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer
    Private MyToolStrip As ToolStrip

    Sub New()
        InitializeComponent()
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
    Private Sub InitializeComponent()

    End Sub

    Private Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs) Handles MyBase.Load
        Me.MyPdfViewer = New PdfViewer()
        Me.MyToolStrip = New ToolStrip()
        Me.MyToolStrip.Items.Add(Me.MyPdfViewer.ToolStrip.Items(Foxit.PDF.Viewer.PdfToolStripItems.OpenFile))
        Me.MyToolStrip.Items.Add(Me.MyPdfViewer.ToolStrip.Items(Foxit.PDF.Viewer.PdfToolStripItems.TotalPages))
        Me.Controls.Add(MyPdfViewer)
        Me.Controls.Add(MyToolStrip)
    End Sub

End Class						
</code><code lang="C#">
using System;
using System.Windows.Forms;
using Foxit.PDF.Viewer;

namespace PDFViewerDemo
{
    public class Form1 : Form
    {
        private Foxit.PDF.Viewer.PdfViewer pdfViewer;
        private System.Windows.Forms.ToolStrip toolStrip;

        public Form1()
        {
            InitializeComponent();
            this.Load += new EventHandler(Form1_Load);
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.toolStrip = new ToolStrip();
        }
        private void Form1_Load(object sender, EventArgs e)
        {        
            this.toolStrip.Items.Add(this.pdfViewer.ToolStrip.Items[Foxit.PDF.Viewer.PdfToolStripItems.OpenFile]);
            this.toolStrip.Items.Add(this.pdfViewer.ToolStrip.Items[Foxit.PDF.Viewer.PdfToolStripItems.TotalPages]);
            this.Controls.Add(pdfViewer);
            this.Controls.Add(toolStrip);
        }
    }
}
</code></example>
            <licensing>
This class is a Foxit PDF Viewer feature. The following license is required for non-evaluation usage:
<list type="bullet"><item>Foxit PDF Viewer for .NET SDK</item></list></licensing>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfToolStrip.ToolStrip">
            <summary>
Gets the ToolStrip inside the PdfToolStrip control.
</summary>
        </member>
        <member name="M:Foxit.PDF.Viewer.PdfToolStrip.DisposePdfToolStrip(System.Object,System.EventArgs)">
            <summary>
Disposes an associated <see cref="T:Foxit.PDF.Viewer.PdfToolStrip" />.
</summary>
        </member>
        <member name="M:Foxit.PDF.Viewer.PdfToolStrip.AssociateToPdfViewer(Foxit.PDF.Viewer.PdfViewer)">
            <summary>
Associates this <see cref="T:Foxit.PDF.Viewer.PdfToolStrip" /> to an existing <see cref="T:Foxit.PDF.Viewer.PdfViewer" /> control.
</summary>
        </member>
        <member name="M:Foxit.PDF.Viewer.PdfToolStrip.#ctor">
            <summary>
Initializes a new instance of the PdfToolStrip class.
</summary>
        </member>
        <member name="T:Foxit.PDF.Viewer.PdfToolStrip">
            <summary>
Represents a PdfToolStrip.
</summary>
            <example>This example demonstrates how to Associate a PdfToolStrip control to <see cref="T:Foxit.PDF.Viewer.PdfViewer" /> using <see cref="T:Foxit.PDF.Viewer.PdfToolStrip" />.<p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports Foxit.PDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer
    private MyToolbar As PdfToolStrip

    Sub New()
        InitializeComponent()
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
	Private Sub InitializeComponent()

	End Sub

    Private Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs) Handles MyBase.Load
        Me.MyPdfViewer = New PdfViewer()
        Me.MyToolbar = New PdfToolStrip()
        Me.Controls.Add(MyToolbar)
        Me.MyToolbar.AssociateToPdfViewer(Me.MyPdfViewer)
        Me.Controls.Add(MyPdfViewer)
		' used to DisassociatePdfViewer
		Me.MyToolbar.AssociateToPdfViewer(nothing)
        ' Disposing an MyToolbar
		Me.MyToolbar.Dispose()
    End Sub

End Class						
</code><code lang="C#">
using System;
using System.Windows.Forms;
using Foxit.PDF.Viewer;

namespace PDFViewerDemo
{
    public class Form1 : Form
    {
        private Foxit.PDF.Viewer.PdfViewer pdfViewer;
        private Foxit.PDF.Viewer.PdfToolStrip pdfToolStrip;

        public Form1()
        {
            InitializeComponent();
            this.Load += new EventHandler(Form1_Load);
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            pdfToolStrip = new PdfToolStrip();
            this.Controls.Add(pdfViewer);
            this.Controls.Add(pdfToolStrip);
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            this.pdfToolStrip.AssociateToPdfViewer(this.pdfViewer);
            // used to DisassociatePdfViewer
            this.pdfToolStrip.AssociateToPdfViewer(null);
            // Disposing  MyToolbar
            this.pdfToolStrip.Dispose();
        }
    }
}
</code></example>
            <licensing>
This class is a Foxit PDF Viewer feature. The following license is required for non-evaluation usage:
<list type="bullet"><item>Foxit PDF Viewer for .NET SDK</item></list></licensing>
        </member>
        <member name="M:Foxit.PDF.Viewer.PdfViewer.ShowAboutBox">
            <summary>
Shows an about box that contains version info.
</summary>
        </member>
        <member name="M:Foxit.PDF.Viewer.PdfViewer.AddLicense(System.String)">
            <summary>
Adds a license key.
</summary>
            <param name="licenseKey">The license key to add.</param>
            <returns>A boolean value indicating if the license key is valid.</returns>
            <remarks>This method accepts a license key, not a serial number.</remarks>
        </member>
        <member name="M:Foxit.PDF.Viewer.PdfViewer.Navigate(Foxit.PDF.Viewer.Action)">
            <summary>
Navigate to the destination stored in the <see cref="T:Foxit.PDF.Viewer.Action" /> object of the link.
</summary>
            <param name="action"> The <see cref="T:Foxit.PDF.Viewer.Action" /> object containing the information about the link.</param>
            <remarks> In case of remote goto user needs to open the file first and then navigate to the action. </remarks>
            <example>The following example will show how to get a <see cref="T:Foxit.PDF.Viewer.Action" /> object and navigate to it. <p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports Foxit.PDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler MyPdfViewer.LinkClicked, AddressOf MyPdfViewer_LinkClicked
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
    Private Sub MyPdfViewer_LinkClicked(ByVal sender As Object, ByVal e As Foxit.PDF.Viewer.LinkClickedEventArgs)
        ' Get the action associated with the link.
        Dim Myction As Foxit.PDF.Viewer.Action = e.Action

        ' Navigate to the action.
        Me.MyPdfViewer.Navigate(Myction)
    End Sub
        
End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using Foxit.PDF.Viewer;

namespace PDFViewerDemo
{
    public class Form1 : Form
    {
        private PdfViewer pdfViewer;

        public Form1()
        {
             InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }						                				
											
        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            pdfViewer.LinkClicked += new Foxit.PDF.Viewer.LinkClickEventHandler(this.pdfViewer_LinkClicked);
        }

        private void pdfViewer_LinkClicked(object sender, Foxit.PDF.Viewer.LinkClickedEventArgs e)
        {
            // Get the action associated with the link.
            Foxit.PDF.Viewer.Action action = e.Action;

            // Navigate to the action.
            this.pdfViewer.Navigate(action);
        }
    }
}
</code></example>
        </member>
        <member name="M:Foxit.PDF.Viewer.PdfViewer.GetPageVisibleArea(Foxit.PDF.Viewer.View)">
            <summary>
Retrieves an array of pages present in <see cref="T:Foxit.PDF.Viewer.View" /> specified with respective visible area.
</summary>
            <param name="view">The <see cref="T:Foxit.PDF.Viewer.View" /> whose visible area is required. </param>
            <example> For example refer <see cref="T:Foxit.PDF.Viewer.PageVisibleArea" /> class. </example>
        </member>
        <member name="M:Foxit.PDF.Viewer.PdfViewer.ClearSearchHighlights">
            <summary>
Clear all the highlights in the document.
</summary>
            <example>The following example will show how to clear all the highlights from the document. <p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports Foxit.PDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
     Private Sub ClearHighlights()
        ' Open document in viewer.
        MyPdfViewer.Open("C:\MyDocument.pdf")

        ' Clear all the highlights.
        MyPdfViewer.ClearSearchHighlights()       
    End Sub

End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using Foxit.PDF.Viewer;

namespace PDFViewerDemo
{
    public class Form1 : Form
    {
        private Foxit.PDF.Viewer.PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }						                				
							
        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
        }

        private void ClearHighlights()
        {
            // Open document in viewer.
            pdfViewer.Open(@"C:\MyDocument.pdf");

            // Clear all the highlights.
            pdfViewer.ClearSearchHighlights();
        }
    }
}
</code></example>
        </member>
        <member name="M:Foxit.PDF.Viewer.PdfViewer.Highlight(System.String,Foxit.PDF.Viewer.MatchOptions)">
            <summary>
Highlights the specified string throughout the document.
</summary>
            <param name="searchTerm">The string to be highlighted.</param>
            <param name="option">The match option to be used to search and highlight the string.</param>
            <example>The following example will show how to highlight a string throughout the document with a match option. <p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports Foxit.PDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
    Private Sub Highlight()
        ' Highlights a string throughout the document.
        MyPdfViewer.Highlight("string", MatchOptions.WholeWordOnly)       
    End Sub

End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using Foxit.PDF.Viewer;

namespace PDFViewerDemo
{
    public class Form1 : Form
    {
        private Foxit.PDF.Viewer.PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }						                				
			
        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
        }

        private void Highlight()
        {
            // Highlights a string throughout the document.
            pdfViewer.Highlight("string" , MatchOptions.WholeWordOnly);
        }
    }
}
</code></example>
        </member>
        <member name="M:Foxit.PDF.Viewer.PdfViewer.SearchBackward(System.String,Foxit.PDF.Viewer.MatchOptions)">
            <summary>
Searches the string specified in backward direction.
</summary>
            <param name="searchTerm">The string to be searched.</param>
            <param name="option">The match option to use for searching.</param>
            <remarks>Search starts with firing <see cref="E:Foxit.PDF.Viewer.PdfViewer.SearchProgressing" /> event. 
During search, <see cref="E:Foxit.PDF.Viewer.PdfViewer.Searched" /> event will be fired if any match is found. <see cref="E:Foxit.PDF.Viewer.PdfViewer.SearchProgressing" /> event is 
fired each time with Status 'Progressing' when the search finishes the current page and moves to next page. 
When search completed  <see cref="E:Foxit.PDF.Viewer.PdfViewer.Searched" /> event will be fired with Status 'Completed'. 
If user cancels the existing search through user interface or through code by invoking a new search, then 
<see cref="E:Foxit.PDF.Viewer.PdfViewer.Searched" /> event will be fired with Status 'Canceled'. 
Change in the search term, options, search direction or invoking a new search when current search is progressing, will result 
in resetting of the current search.
</remarks>
            <example>The following example will show how to search a string in backward direction with match option. <p /><code lang="VB">			    
Imports System
Imports System.Windows.Forms
Imports Foxit.PDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
    Private Sub Search()
        ' Searches string in backward direction.
        MyPdfViewer.SearchBackward("string", MatchOptions.WholeWordOnly)        
    End Sub

End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using Foxit.PDF.Viewer;

namespace PDFViewerDemo
{
    public class Form1 : Form
    {
        private Foxit.PDF.Viewer.PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }						                				

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
        }

        private void Search()
        {
            // Searches string in backward direction.
            pdfViewer.SearchBackward("string" , MatchOptions.WholeWordOnly);
        }
    }
}
</code></example>
        </member>
        <member name="M:Foxit.PDF.Viewer.PdfViewer.SearchForward(System.String,Foxit.PDF.Viewer.MatchOptions)">
            <summary>
Searches the string specified in forward direction.
</summary>
            <param name="searchTerm">The string to be searched.</param>
            <param name="option">The match option to use for searching.</param>
            <remarks>Search starts with firing <see cref="E:Foxit.PDF.Viewer.PdfViewer.SearchProgressing" /> event. 
During search, <see cref="E:Foxit.PDF.Viewer.PdfViewer.Searched" /> event will be fired if any match is found. <see cref="E:Foxit.PDF.Viewer.PdfViewer.SearchProgressing" /> event is
fired each time with Status 'Progressing' when the search finishes the current page and moves to next page. 
When search completed  <see cref="E:Foxit.PDF.Viewer.PdfViewer.Searched" /> event will be fired with Status 'Completed'. 
If user cancels the existing search through user interface or through code by invoking a new search, then 
<see cref="E:Foxit.PDF.Viewer.PdfViewer.Searched" /> event will be fired with Status 'Canceled'.
Change in the search term, options, search direction or invoking a new search when current search is progressing, will result 
in resetting of the current search.
</remarks>
            <example>The following example will show how to search a sring in forward direction with match option. <p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports Foxit.PDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
    Private Sub Search()
		' Searches string in forward direction.
		MyPdfViewer.SearchForward("string", MatchOptions.WholeWordOnly)
	End Sub

End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using Foxit.PDF.Viewer;

namespace PDFViewerDemo
{
    public class Form1 : Form
    {
        private Foxit.PDF.Viewer.PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }						
			                				
        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
        }

        private void Search()
        {
            // Searches string in forward direction.
            pdfViewer.SearchForward("string" , MatchOptions.WholeWordOnly);
        }
    }
}
</code></example>
        </member>
        <member name="M:Foxit.PDF.Viewer.PdfViewer.Print">
            <summary>
Prints the document.
</summary>
        </member>
        <member name="M:Foxit.PDF.Viewer.PdfViewer.GoToLastPage">
            <summary>
Moves to the last page of the document.
</summary>
            <example>The following example will show how to move to last page of the document. <p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports Foxit.PDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
    Private Sub NavigateToPage()
		' Open document in viewer.
		MyPdfViewer.Open("C:\MyDocument.pdf")

		' Move to last page.
		MyPdfViewer.GoToLastPage()
	End Sub

End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using Foxit.PDF.Viewer;

namespace PDFViewerDemo
{
    public class Form1 : Form
    {
        private Foxit.PDF.Viewer.PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }						
			
        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
        }

        private void NavigateToPage()
        {
            // Open document in viewer.
            pdfViewer.Open(@"C:\MyDocument.pdf");

            // Move to last page.
            pdfViewer.GoToLastPage();
        }
    }
}
</code></example>
        </member>
        <member name="M:Foxit.PDF.Viewer.PdfViewer.GoToFirstPage">
            <summary>
Moves to the first page of the document.
</summary>
            <example>The following example will show how to move to first page of the document. <p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports Foxit.PDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
    Private Sub NavigateToPage()
		' Open document in Viewer.
		MyPdfViewer.Open("C:\MyDocument.pdf")

		' Move to first page.
		MyPdfViewer.GoToFirstPage()
	End Sub

End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using Foxit.PDF.Viewer;

namespace PDFViewerDemo
{
    public class Form1 : Form
    {
        private Foxit.PDF.Viewer.PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }						

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
        }

        private void NavigateToPage()
        {
            // Open document in Viewer.
            pdfViewer.Open(@"C:\MyDocument.pdf");

            // Move to first page.
            pdfViewer.GoToFirstPage();
        }
    }
}
</code></example>
        </member>
        <member name="M:Foxit.PDF.Viewer.PdfViewer.GoToPreviousPage">
            <summary>
Moves to the previous page.
</summary>
            <returns> True if successfully moved to previous page else false. </returns>
            <example>The following example will show how to move to previous page. <p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports Foxit.PDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
    Private Sub NavigateToPage()
		' Move to previous page.
		Dim bResult As Boolean = MyPdfViewer.GoToPreviousPage()

		If bResult Then
			MessageBox.Show("Successfully moved to previous page")
		Else
			MessageBox.Show("There's no previous page to move")
		End If
	End Sub

End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using Foxit.PDF.Viewer;

namespace PDFViewerDemo
{
    public class Form1 : Form
    {
        private Foxit.PDF.Viewer.PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }						

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
        }

        private void NavigateToPage()
        {
            // Move to previous page.
            bool bResult = pdfViewer.GoToPreviousPage();

            if(bResult)
                MessageBox.Show("Successfully moved to previous page");
            else
                MessageBox.Show("There's no previous page to move");
        }
    }
}
</code></example>
        </member>
        <member name="M:Foxit.PDF.Viewer.PdfViewer.GoToNextPage">
            <summary>
Moves to next page.
</summary>
            <returns> True if successfully moved to next page else false. </returns>
            <example>The following example will show how to move to next page. <p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports Foxit.PDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
	Private Sub NavigateToPage()
		' Move to next page.
		Dim bResult As Boolean = MyPdfViewer.GoToNextPage()

		If bResult Then
			MessageBox.Show("Successfully moved to next page")
		Else
			MessageBox.Show("There's no next page to move")
		End If
	End Sub

End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using Foxit.PDF.Viewer;

namespace PDFViewerDemo
{
    public class Form1 : Form
    {
        private Foxit.PDF.Viewer.PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }		
							
        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
        }

        private void NavigateToPage()
        {
            // Move to next page.
            bool bResult = pdfViewer.GoToNextPage();

            if(bResult)
                MessageBox.Show("Successfully moved to next page");
            else
                MessageBox.Show("There's no next page to move");
        }
    }
}
</code></example>
        </member>
        <member name="M:Foxit.PDF.Viewer.PdfViewer.GoTo(System.Int32)">
            <summary>
Moves to the page specified as parameter.
</summary>
            <param name="pageNumber">The page number to move to.</param>
            <remarks> The page number should be a non zero based index. </remarks>
            <example>The following example will show how to move to a page by specifying its number. <p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports Foxit.PDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
	Private Sub NavigateToPagenumber()
		' Open document in viewer.
		MyPdfViewer.Open("C:\MyDocument.pdf")

		' Move to a page.
		' PageNumber ranges from '1' to 'count' of the pages in the document.
		MyPdfViewer.GoTo(1)
	End Sub

End Class						
</code><code lang="C#">
using System;
using System.Windows.Forms;
using Foxit.PDF.Viewer;

namespace PDFViewerDemo
{
    public class Form1 : Form
    {
        private Foxit.PDF.Viewer.PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }		
			
        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
        }

        private void NavigateToPagenumber()
        {
            // Open document in viewer.
            pdfViewer.Open(@"C:\MyDocument.pdf");

            // Move to a page.
			// PageNumber ranges from '1' to 'count' of the pages in the document.
            pdfViewer.GoTo(1); 
        }
    }
}
</code></example>
        </member>
        <member name="M:Foxit.PDF.Viewer.PdfViewer.Navigate(Foxit.PDF.Viewer.Bookmark)">
            <summary>
Navigate to the <see cref="T:Foxit.PDF.Viewer.Bookmark" /> specified.
</summary>
            <param name="bookmark"> The <see cref="T:Foxit.PDF.Viewer.Bookmark" /> to move to.</param>
            <example>The following example will show how to get a <see cref="T:Foxit.PDF.Viewer.Bookmark" /> and navigate to it. <p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports Foxit.PDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
	Private Sub NavigationToBookmark()
		' Get a PDF document object and open in viewer.
		Dim document As New PdfDocument("C:\MyDocument.pdf")
		MyPdfViewer.Open(document)

		' Get a bookmark from PDF document object.
		Dim bookmarkList As BookmarkList = document.Bookmarks

		' Get a bookmark from the list.
		' Index ranges from 0 to n(count-1) of the bookmarks
		Dim bookmark As Bookmark = bookmarkList(0)

		' Navigate to a bookmark passed as parameter.
		MyPdfViewer.Navigate(bookmark)
	End Sub

End Class						
</code><code lang="C#">
using System;
using System.Windows.Forms;
using Foxit.PDF.Viewer;

namespace PDFViewerDemo
{
    public class Form1 : Form
    {
        private Foxit.PDF.Viewer.PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }		
							
        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
        }

        private void NavigationToBookmark()
        {
            // Get a PDF document object and open in viewer.
            PdfDocument document = new PdfDocument(@"C:\MyDocument.pdf");
            pdfViewer.Open(document);

            // Get a bookmark from PDF document object.
            BookmarkList bookmarkList = document.Bookmarks;

            // Get a bookmark from the list.
            // Index ranges from 0 to n(count-1) of the bookmarks
            Bookmark bookmark = bookmarkList[0];

            // Navigate to a bookmark passed as parameter.
            pdfViewer.Navigate(bookmark);
        }
    }
}
</code></example>
        </member>
        <member name="M:Foxit.PDF.Viewer.PdfViewer.Navigate(Foxit.PDF.Viewer.View,System.Int32,System.Int32)">
            <summary>
Navigates to the <see cref="T:Foxit.PDF.Viewer.View" /> specified.
</summary>
            <param name="View"> The <see cref="T:Foxit.PDF.Viewer.View" /> to move to.</param>
            <param name="offsetX"> The view position will be moved left or right based on this value.</param>
            <param name="offsetY"> The view position will be moved up or down based on this value.</param>
        </member>
        <member name="M:Foxit.PDF.Viewer.PdfViewer.Navigate(Foxit.PDF.Viewer.View)">
            <summary>
Navigates to the <see cref="T:Foxit.PDF.Viewer.View" /> specified.
</summary>
            <param name="View"> The <see cref="T:Foxit.PDF.Viewer.View" /> to move to.</param>
            <example>The following example will show how to navigate to a view given as parameter. <p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports Foxit.PDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
	Private Sub NavigationToView()
		' Get initial view.
		Dim initView As Foxit.PDF.Viewer.View = MyPdfViewer.GetInitialView()

		' Navigate to view passed as parameter.
		MyPdfViewer.Navigate(initView)
	End Sub

End Class						
</code><code lang="C#">
using System;
using System.Windows.Forms;
using Foxit.PDF.Viewer;

namespace PDFViewerDemo
{
    public class Form1 : Form
    {
        private Foxit.PDF.Viewer.PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }		
			
        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
        }

        private void NavigationToView()
        {
            // Get initial view.
            Foxit.PDF.Viewer.View initView = pdfViewer.GetInitialView();

            // Navigate to view passed as parameter.
            pdfViewer.Navigate(initView);
        }
    }
}
</code></example>
        </member>
        <member name="M:Foxit.PDF.Viewer.PdfViewer.NavigateToNextView">
            <summary>
Navigates to the <see cref="T:Foxit.PDF.Viewer.View" /> in next history.
</summary>
            <returns> True if successfully moved to next view else false. </returns>
            <example>The following example will show how to Navigate to the next view. <p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports Foxit.PDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
	Private Sub NavigationToView()
		' Navigate to next view.
		Dim bResult As Boolean = MyPdfViewer.NavigateToNextView()

		If bResult Then
			MessageBox.Show("Successfully moved to next view")
		Else
			MessageBox.Show("There's no next view to navigate")
		End If
	End Sub

End Class						
</code><code lang="C#">
using System;
using System.Windows.Forms;
using Foxit.PDF.Viewer;

namespace PDFViewerDemo
{
    public class Form1 : Form
    {
        private Foxit.PDF.Viewer.PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }		
			
        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
        }

        private void NavigationToView()
        {
            // Navigate to next view.
            bool bResult = pdfViewer.NavigateToNextView();

            if(bResult)
                MessageBox.Show("Successfully moved to next view");
            else
                MessageBox.Show("There's no next view to navigate");
        }
    }
}
</code></example>
        </member>
        <member name="M:Foxit.PDF.Viewer.PdfViewer.NavigateToPreviousView">
            <summary>
Navigates to the <see cref="T:Foxit.PDF.Viewer.View" /> in previous history.
</summary>
            <returns> True if successfully moved to previous view else false. </returns>
            <example>The following example will show how to Navigate to the previous view. <p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports Foxit.PDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
	Private Sub NavigationToView()
		' Navigate to previous view.
		Dim bResult As Boolean = MyPdfViewer.NavigateToPreviousView()

		If bResult Then
			MessageBox.Show("Successfully moved to previous view")
		Else
			MessageBox.Show("There's no previous view to navigate")
		End If
	End Sub

End Class						
</code><code lang="C#">
using System;
using System.Windows.Forms;
using Foxit.PDF.Viewer;

namespace PDFViewerDemo
{
    public class Form1 : Form
    {
        private Foxit.PDF.Viewer.PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }		
			
        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
        }

        private void NavigationToView()
        {
            // Navigate to previous view.
            bool bResult = pdfViewer.NavigateToPreviousView();

            if(bResult)
                MessageBox.Show("Successfully moved to previous view");
            else
                MessageBox.Show("There's no previous view to navigate");
        }
    }
}
</code></example>
        </member>
        <member name="M:Foxit.PDF.Viewer.PdfViewer.ClearViewHistory">
            <summary>
Clears all the <see cref="T:Foxit.PDF.Viewer.View" /> present in the history.
</summary>
            <example>The following example will show how to clear all the views present in the history. <p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports Foxit.PDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)      
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
	Private Sub ClearViewerViewHistory()
		' Clear all the views.
		MyPdfViewer.ClearViewHistory()
	End Sub

End Class						
</code><code lang="C#">
using System;
using System.Windows.Forms;
using Foxit.PDF.Viewer;

namespace PDFViewerDemo
{
    public class Form1 : Form
    {
        private Foxit.PDF.Viewer.PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }		

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
        }

        private void ClearViewerViewHistory()
        {
            // Clear all the views.
            pdfViewer.ClearViewHistory();
        }
    }
} 
</code></example>
        </member>
        <member name="M:Foxit.PDF.Viewer.PdfViewer.GetCurrentView">
            <summary>
Retrieves the current <see cref="T:Foxit.PDF.Viewer.View" /> of the document displayed.
</summary>
            <returns> This method returns the current <see cref="T:Foxit.PDF.Viewer.View" /> of the document on display. </returns>
            <example>The following example will show how to get current view and its associated data. <p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports Foxit.PDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler Me.Load, New EventHandler(AddressOf Form1_Load)
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
    Private Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs)
        ' Open document in Viewer.
        MyPdfViewer.Open("C:\MyDocument.pdf")

        ' Get current view on display.
        Dim MyCurrentView As Foxit.PDF.Viewer.View = MyPdfViewer.GetCurrentView()
        
        ' Get the details of view.
        Dim pageNo As Integer = MyCurrentView.StartPageNumber
        Dim zoomValue As Single = MyCurrentView.ZoomPercent
        Dim MyDisplayMode As PageDisplayMode = MyCurrentView.PageDisplayMode
        Dim MySoomMode As Zoom = MyCurrentView.ZoomMode
        Dim MyPageOrientation As Foxit.PDF.Viewer.Orientation = MyCurrentView.PageOrientation
    End Sub

End Class						
</code><code lang="C#">
using System;
using System.Windows.Forms;
using Foxit.PDF.Viewer;

namespace PDFViewerDemo
{
    public class Form1 : Form
    {
        private Foxit.PDF.Viewer.PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }		

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            this.Load +=new EventHandler(Form1_Load);
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            // Open document in viewer.
            pdfViewer.Open(@"C:\MyDocument.pdf");

            // Get current view on display.
            Foxit.PDF.Viewer.View currentView = pdfViewer.GetCurrentView();

            // Get the details of view.
            int pageNo = currentView.StartPageNumber;
            float zoomValue = currentView.ZoomPercent;
            PageDisplayMode displayMode = currentView.PageDisplayMode;
            Zoom zoomMode = currentView.ZoomMode;
            Foxit.PDF.Viewer.Orientation pageOrientation = currentView.PageOrientation;
        }
    }
}
</code></example>
        </member>
        <member name="M:Foxit.PDF.Viewer.PdfViewer.GetInitialView">
            <summary>
Retrieves the initial <see cref="T:Foxit.PDF.Viewer.View" /> of the document displayed.
</summary>
            <returns> This method returns the initial <see cref="T:Foxit.PDF.Viewer.View" /> of the document on display. </returns>
            <example>The following example will show how to get the initial view and its associated details. <p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports Foxit.PDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler Me.Load, New EventHandler(AddressOf Form1_Load)
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
    Private Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs) Handles MyBase.Load
        ' Open the document in Viewer.
        MyPdfViewer.Open("C:\MyDocument.pdf")

        'Get initial view of the document.
        Dim MyInitialView As Foxit.PDF.Viewer.View = MyPdfViewer.GetInitialView()
        
        ' Get the details of view.
        Dim pageNo As Integer = MyInitialView.StartPageNumber
        Dim zoomValue As Single = MyInitialView.ZoomPercent
        Dim MyDisplayMode As PageDisplayMode = MyInitialView.PageDisplayMode
        Dim MyZoomMode As Zoom = MyInitialView.ZoomMode
        Dim MyPageOrientation As Foxit.PDF.Viewer.Orientation = MyInitialView.PageOrientation
    End Sub

End Class						
</code><code lang="C#">
using System;
using System.Windows.Forms;
using Foxit.PDF.Viewer;

namespace PDFViewerDemo
{
    public class Form1 : Form
    {
        private Foxit.PDF.Viewer.PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }				

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            this.Load+=new EventHandler(Form1_Load);
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            // Open document in PdfViewwer.
            pdfViewer.Open(@"C:\MyDocument.pdf");

            //Get initial view of the document.
            Foxit.PDF.Viewer.View  initialView = pdfViewer.GetInitialView();

            // Get the details of view.
            int pageNo = initialView.StartPageNumber;
            float zoomValue = initialView.ZoomPercent;
            PageDisplayMode displayMode =  initialView.PageDisplayMode;
            Zoom zoomMode = initialView.ZoomMode;
            Foxit.PDF.Viewer.Orientation pageOrientation = initialView.PageOrientation;
        }
    }
}
</code></example>
        </member>
        <member name="M:Foxit.PDF.Viewer.PdfViewer.Close">
            <summary>
Closes the opened PDF.
</summary>
            <example>This example shows, how to load a PDF document in <see cref="T:Foxit.PDF.Viewer.PdfViewer" /> and close it.<p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports Foxit.PDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Private Sub InitializeComponent()
        Dim MyCloseButton As New Button()
        MyCloseButton.Text = "CloseButton"
        Me.Controls.Add(MyCloseButton)
        AddHandler MyCloseButton.Click, New EventHandler(AddressOf MyCloseButton_Click)

        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler Me.Load, New EventHandler(AddressOf Form1_Load)
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
    Private Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs)
        ' Open the document in Viewer.
        MyPdfViewer.Open("C:\MyDocument.pdf")
    End Sub

    Private Sub MyCloseButton_Click(ByVal sender As Object, ByVal e As EventArgs)
        MyPdfViewer.Close()
    End Sub

End Class						
</code><code lang="C#">
using System;
using System.Windows.Forms;
using Foxit.PDF.Viewer;

namespace PDFViewerDemo
{
    public class Form1 : System.Windows.Forms.Form
    {
        private PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }

        private void InitializeComponent()
        {
            Button CloseButton = new Button();
            CloseButton.Text = "CloseButton";
            this.Controls.Add(CloseButton);
            CloseButton.Click+= new EventHandler(CloseButton_Click);
			
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            this.Load +=new EventHandler(Form1_Load);
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            pdfViewer.Open(@"C:\MyDocument.pdf");
        }

        private void CloseButton_Click(object sender, EventArgs e)
        {
            pdfViewer.Close();
        }
    }
}
</code></example>
        </member>
        <member name="M:Foxit.PDF.Viewer.PdfViewer.Open(Foxit.PDF.Viewer.PdfDocument)">
            <summary>
Opens a new PDF using <see cref="T:Foxit.PDF.Viewer.PdfDocument" />.
</summary>
            <example>This example shows, how to load a PDF document in <see cref="T:Foxit.PDF.Viewer.PdfViewer" /> using <see cref="T:Foxit.PDF.Viewer.PdfDocument" />.<p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports Foxit.PDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
    Private Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs) Handles MyBase.Load
        ' Load and open the document in Viewer.
        Dim MyDocument As New PdfDocument("C:\MyDocument.pdf")
        MyPdfViewer.Open(MyDocument)
    End Sub

End Class						
</code><code lang="C#">
using System;
using System.Windows.Forms;
using Foxit.PDF.Viewer;

namespace PDFViewerDemo
{
    public class Form1 : Form
    {
        private Foxit.PDF.Viewer.PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
            this.Load += new EventHandler(Form1_Load);
        }

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            // Load and open the document in Viewer.
            PdfDocument document = new PdfDocument(@"C:\MyDocument.pdf");
            pdfViewer.Open(document);
        }
    }
}
</code></example>
        </member>
        <member name="M:Foxit.PDF.Viewer.PdfViewer.Open(System.String)">
            <summary>
Opens a PDF document.
</summary>
            <example>This example shows, how to load a PDF document in <see cref="T:Foxit.PDF.Viewer.PdfViewer" />.<p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports Foxit.PDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
    Private Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs) Handles MyBase.Load
        ' open the document using the file path.
        MyPdfViewer.Open("C:\MyDocument.pdf")
    End Sub

End Class						
</code><code lang="C#">
using System;
using System.Windows.Forms;
using Foxit.PDF.Viewer;

namespace PDFViewerDemo
{
    public class Form1 : Form
    {
        private Foxit.PDF.Viewer.PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
            this.Load += new EventHandler(Form1_Load);
        }

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            // open the document using the file path.
            pdfViewer.Open(@"C:\MyDocument.pdf");
        }
    }
}
</code></example>
        </member>
        <member name="E:Foxit.PDF.Viewer.PdfViewer.PagePrinting">
            <summary>
Occurs before the start of printing a PDF page.
</summary>
        </member>
        <member name="E:Foxit.PDF.Viewer.PdfViewer.DocumentPrinted">
            <summary>
Occurs after the printing of the last page of the PDF document.
</summary>
        </member>
        <member name="E:Foxit.PDF.Viewer.PdfViewer.DocumentPrinting">
            <summary>
Occurs before the start of the PDF document printing.
</summary>
        </member>
        <member name="E:Foxit.PDF.Viewer.PdfViewer.PdfViewerMouseMove">
            <summary>
Occurs when user moves the mouse pointer on a PdfViewer control.
</summary>
            <example>This example demonstrates, how to get the mouse move event with information about
the page co-ordinates using <see cref="T:Foxit.PDF.Viewer.PdfViewerMouseEventArgs" /> class. <p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports Foxit.PDF.Viewer
Imports System.Drawing
Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub	
		    
    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler MyPdfViewer.PdfViewerMouseMove, AddressOf MyPdfViewer_MouseMoved
    End Sub

    Private Sub MyPdfViewer_MouseMoved(ByVal sender As Object, ByVal e As Foxit.PDF.Viewer.PdfViewerMouseEventArgs)
        ' Get the co-ordinates on the control.
        Dim ControlCoordinate As Point = e.Location
        
        ' Get the page number.
        Dim PageNumber As Integer = e.PageNumber
        
        ' Get the co-ordinates on the page (in PDF points).
        Dim PageCoordinateX As Integer = e.PageX
        Dim PageCoordinateY As Integer = e.PageY
    End Sub

End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using Foxit.PDF.Viewer;
using System.Drawing;
namespace PDFViewerDemo
{
    public class Form1 : Form
    {
        private PdfViewer pdfViewer;

        public Form1()
        {
             InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }																																			

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            pdfViewer.PdfViewerMouseMove += new Foxit.PDF.Viewer.PdfViewerMouseEventHandler(this.pdfViewer_MouseMoved);
        }

        private void pdfViewer_MouseMoved(object sender, Foxit.PDF.Viewer.PdfViewerMouseEventArgs e)
        {
            // Get the co-ordinates on the control.
            Point controlCoordinate = e.Location;

            // Get the page number.
             int pageNumber = e.PageNumber;

            // Get the co-ordinates on the page (in PDF points).
            int pageCoordinateX = e.PageX;
            int pageCoordinateY = e.PageY;
        }
    }
}         
</code></example>
        </member>
        <member name="E:Foxit.PDF.Viewer.PdfViewer.PdfViewerMouseClick">
            <summary>
Occurs when user clicks on a PdfViewer control.
</summary>
            <remarks> 
By default this event fires only for left mouse click. For handling right mouse click <see cref="E:Foxit.PDF.Viewer.PdfViewer.ContextMenuShowing" /> event can be used.
If context menu displaying is disabled using <see cref="E:Foxit.PDF.Viewer.PdfViewer.ContextMenuShowing" /> event, then both left and right mouse clicks will fire this event.
</remarks>
            <example>This example demonstrates, how to get the click event with information about
the page co-ordinates using <see cref="T:Foxit.PDF.Viewer.PdfViewerMouseEventArgs" /> class. <p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports Foxit.PDF.Viewer
Imports System.Drawing
Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub	
		    
    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler MyPdfViewer.PdfViewerMouseClick, AddressOf MyPdfViewer_MouseClicked
    End Sub

    Private Sub MyPdfViewer_MouseClicked(ByVal sender As Object, ByVal e As Foxit.PDF.Viewer.PdfViewerMouseEventArgs)
        ' Get the co-ordinates on the control.
        Dim ControlCoordinate As Point = e.Location
        
        ' Get the page number.
        Dim PageNumber As Integer = e.PageNumber
        
        ' Get the co-ordinates on the page (in PDF points).
        Dim PageCoordinateX As Integer = e.PageX
        Dim PageCoordinateY As Integer = e.PageY
    End Sub

End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using Foxit.PDF.Viewer;
using System.Drawing;
namespace PDFViewerDemo
{
    public class Form1 : Form
    {
        private PdfViewer pdfViewer;

        public Form1()
        {
             InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }																																			

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            pdfViewer.PdfViewerMouseClick += new Foxit.PDF.Viewer.PdfViewerMouseEventHandler(this.pdfViewer_MouseClicked);
        }

        private void pdfViewer_MouseClicked(object sender, Foxit.PDF.Viewer.PdfViewerMouseEventArgs e)
        {
            // Get the co-ordinates on the control.
            Point controlCoordinate = e.Location;

            // Get the page number.
             int pageNumber = e.PageNumber;

            // Get the co-ordinates on the page (in PDF points).
            int pageCoordinateX = e.PageX;
            int pageCoordinateY = e.PageY;
        }
    }
}         
</code></example>
        </member>
        <member name="E:Foxit.PDF.Viewer.PdfViewer.LinkClicked">
            <summary>
Occurs when user clicks on a link.
</summary>
            <example>This example demonstrates, how to get the link Action and how to cancel the 
action associated with the link using <see cref="T:Foxit.PDF.Viewer.LinkClickedEventArgs" /> class. <p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports Foxit.PDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub	
		    
    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler MyPdfViewer.LinkClicked, AddressOf MyPdfViewer_LinkClicked
    End Sub

    Private Sub MyPdfViewer_LinkClicked(ByVal sender As Object, ByVal e As Foxit.PDF.Viewer.LinkClickedEventArgs)
        ' Get the action associated with the link.
        Dim MyAction As Foxit.PDF.Viewer.Action = e.Action
        
        ' Get the action type.
        Dim MyActionType As Foxit.PDF.Viewer.ActionType = MyAction.ActionType

        ' Cancel the action associated with the link
        e.Cancel = True
    End Sub

End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using Foxit.PDF.Viewer;

namespace PDFViewerDemo
{
    public class Form1 : Form
    {
        private PdfViewer pdfViewer;

        public Form1()
        {
             InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }																																			

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            pdfViewer.LinkClicked += new Foxit.PDF.Viewer.LinkClickEventHandler(this.pdfViewer_LinkClicked);
        }

        private void pdfViewer_LinkClicked(object sender, Foxit.PDF.Viewer.LinkClickedEventArgs e)
        {
            // Get the action associated with the link.
            Foxit.PDF.Viewer.Action action = e.Action;

            // Get the action type.
            Foxit.PDF.Viewer.ActionType actionType = action.ActionType;

            // Cancel the action associated with the link
            e.Cancel = true;
        }
    }
}         
</code></example>
        </member>
        <member name="E:Foxit.PDF.Viewer.PdfViewer.ContextMenuShowing">
            <summary>
Occurs when the control's context menu is being displayed.
</summary>
            <remarks>
If context menu displaying is disabled using this event, then both left and right mouse clicks will fire <see cref="E:Foxit.PDF.Viewer.PdfViewer.PdfViewerMouseClick" /> event.
</remarks>
            <example>This example demonstrates, how to hide/show the context menu , override the context menu of the control with a new one and 
setting the type context using <see cref="T:Foxit.PDF.Viewer.ContextMenuShowingEventArgs" /> class. <p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports Foxit.PDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub	
		    
    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler MyPdfViewer.ContextMenuShowing, AddressOf MyPdfViewer_ContextMenuShowing
    End Sub

    Private Sub MyPdfViewer_ContextMenuShowing(ByVal sender As Object, ByVal e As ContextMenuShowingEventArgs)
        ' Suppress the control's existing context menu with a new context menu.
        e.AssignedContextMenu = New ContextMenuStrip()

        ' Create new ToolStripMenuItem and add it to AssignedContextMenu.
        Dim MyToolStripMenuitem1 As New ToolStripMenuItem()
        MyToolStripMenuitem1.Text = "Rotate"
        e.AssignedContextMenu.Items.Add(MyToolStripMenuitem1)

        ' Create new ToolStripMenuItem and add it to AssignedContextMenu.
        Dim MyToolStripMenuitem2 As New ToolStripMenuItem()
        MyToolStripMenuitem2.Text = "View"
        e.AssignedContextMenu.Items.Add(MyToolStripMenuitem2)

        ' Set the value to hide/show the context menu.
        e.Cancel = True
     End Sub

End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using Foxit.PDF.Viewer;

namespace PDFViewerDemo
{
    public class Form1 : Form
    {
        private PdfViewer pdfViewer;

        public Form1()
        {
             InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }																															

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            pdfViewer.ContextMenuShowing += new Foxit.PDF.Viewer.ContextMenuShowingEventHandler(this.pdfViewer_ContextMenuShowing);
        }

        private void pdfViewer_ContextMenuShowing(object sender, Foxit.PDF.Viewer.ContextMenuShowingEventArgs e)
        {
            // Suppress the control's existing context menu with a new context menu.
            e.AssignedContextMenu = new ContextMenuStrip();

            // Create new ToolStripMenuItem and add it to AssignedContextMenu.
            ToolStripMenuItem toolStripMenuitem1 = new ToolStripMenuItem();
            toolStripMenuitem1.Text = "Rotate";
            e.AssignedContextMenu.Items.Add(toolStripMenuitem1);

            // Create new ToolStripMenuItem and add it to AssignedContextMenu.
            ToolStripMenuItem toolStripMenuitem2 = new ToolStripMenuItem();
            toolStripMenuitem2.Text = "View";
            e.AssignedContextMenu.Items.Add(toolStripMenuitem2);

            // Set the value to hide/show the context menu.
            e.Cancel = true;
        }
    }
}         
</code></example>
        </member>
        <member name="E:Foxit.PDF.Viewer.PdfViewer.CursorModeChanged">
            <summary>
Occurs when the cursor mode is changed.
</summary>
            <example>This example demonstrates, how to get the current cursor mode using <see cref="T:Foxit.PDF.Viewer.CursorModeChangedEventArgs" /> class. <p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports Foxit.PDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub	
		    
    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler MyPdfViewer.CursorModeChanged, AddressOf MyPdfViewer_CursorModeChanged
    End Sub

    Private Sub MyPdfViewer_CursorModeChanged(ByVal sender As Object, ByVal e As CursorModeChangedEventArgs)
        ' Get the current cursor mode.
        Dim MyCursorMode As CursorMode = e.CursorMode
    End Sub

End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using Foxit.PDF.Viewer;

namespace PDFViewerDemo
{
    public class Form1 : Form
    {
        private PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }																																			

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            pdfViewer.CursorModeChanged += new Foxit.PDF.Viewer.CursorModeChangedEventHandler(this.pdfViewer_CursorModeChanged);
        }

        private void pdfViewer_CursorModeChanged(object sender, Foxit.PDF.Viewer.CursorModeChangedEventArgs e)
        {
            // Get the current cursor mode.
            CursorMode cursorMode = e.CursorMode;
        }
    }
}        
</code></example>
        </member>
        <member name="E:Foxit.PDF.Viewer.PdfViewer.TextSelected">
            <summary>
Occurs when the text selection is completed.
</summary>
            <example>This example shows how to get selected text, when text selection done using <see cref="E:Foxit.PDF.Viewer.PdfViewer.TextSelected" /> event.<p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports Foxit.PDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub	
		    
    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler MyPdfViewer.TextSelected, AddressOf MyPdfViewer_TextSelected
    End Sub

    Private Sub MyPdfViewer_TextSelected(ByVal sender As Object, ByVal e As Foxit.PDF.Viewer.TextSelectedEventArgs)
		' Get the selected text.
        Dim MySelectedText As String = e.SelectedText
    End Sub

End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using Foxit.PDF.Viewer;

namespace PDFViewerDemo
{
    public class Form1 : System.Windows.Forms.Form
    {
        private PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }																															

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            pdfViewer.TextSelected += new Foxit.PDF.Viewer.TextSelectedEventHandler(this.pdfViewer_TextSelected);
        }

        private void pdfViewer_TextSelected(object sender, Foxit.PDF.Viewer.TextSelectedEventArgs e)
        {
            // Get the selected text.
            string selectedText = e.SelectedText;
        }
    }
}     
</code></example>
        </member>
        <member name="E:Foxit.PDF.Viewer.PdfViewer.TextSelecting">
            <summary>
Occurs when the text is being selected.
</summary>
            <example>This example shows how to disable or cancel text selection using <see cref="E:Foxit.PDF.Viewer.PdfViewer.TextSelecting" /> event.<p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports Foxit.PDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub	
		    
    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler MyPdfViewer.TextSelecting, AddressOf MyPdfViewer_TextSelecting
    End Sub

    Private Sub MyPdfViewer_TextSelecting(ByVal sender As Object, ByVal e As Foxit.PDF.Viewer.TextSelectingEventArgs)
        ' Cencel the text selection.
        e.Cancel = True
    End Sub

End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using Foxit.PDF.Viewer;

namespace PDFViewerDemo
{
    public class Form1 : System.Windows.Forms.Form
    {
        private PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }																											

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            pdfViewer.TextSelecting += new Foxit.PDF.Viewer.TextSelectingEventHandler(this.pdfViewer_TextSelecting);
        }

        private void pdfViewer_TextSelecting(object sender, Foxit.PDF.Viewer.TextSelectingEventArgs e)
        {
            // Cancel the text selection.
            e.Cancel = true;
        }
    }
}        
</code></example>
        </member>
        <member name="E:Foxit.PDF.Viewer.PdfViewer.ViewChanged">
            <summary>
Occurs each time when the view of the display is changed.
</summary>
            <example>This example demonstrates, how to get the changed view and add it to history using <see cref="T:Foxit.PDF.Viewer.ViewChangedEventArgs" /> class. <p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports Foxit.PDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub	
		    
    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler MyPdfViewer.ViewChanged, AddressOf MyPdfViewer_ViewChanged
    End Sub

    Private Sub MyPdfViewer_ViewChanged(ByVal sender As Object, ByVal e As Foxit.PDF.Viewer.ViewChangedEventArgs)
        ' Get the changed view.
        Dim changedView As Foxit.PDF.Viewer.View = e.PreviousView
        
        ' Setting to false, will exclude this view from storing into the view history.
        e.AddViewToHistory = False
    End Sub

End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using Foxit.PDF.Viewer;

namespace PDFViewerDemo
{
    public class Form1 : Form
    {
        private PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }																								

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            pdfViewer.ViewChanged += new Foxit.PDF.Viewer.ViewChangedEventHandler(this.pdfViewer_ViewChanged);
        }

        private void pdfViewer_ViewChanged(object sender, Foxit.PDF.Viewer.ViewChangedEventArgs e)
        {
            // Get the changed view.
            Foxit.PDF.Viewer.View changedView = e.PreviousView;

            // Setting to false, will exclude this view from storing into the view history.
            e.AddViewToHistory = false;
        }
    }
}         
</code></example>
        </member>
        <member name="E:Foxit.PDF.Viewer.PdfViewer.SearchDialogShowing">
            <summary>
Occurs when the search dialog is being displayed.
</summary>
            <example>This example shows, how to hide the search dialog and set the match option for search using <see cref="E:Foxit.PDF.Viewer.PdfViewer.SearchDialogShowing" /> event.<p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports Foxit.PDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub	
		    
    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler MyPdfViewer.SearchDialogShowing, AddressOf MyPdfViewer_SearchDialogShowing
    End Sub

    Private Sub MyPdfViewer_SearchDialogShowing(ByVal sender As Object, ByVal e As Foxit.PDF.Viewer.SearchDialogShowingEventArgs)
        ' Hide the search dialog.
        e.Cancel = True

        ' Set the match option for search
        e.MatchOption = MatchOptions.WholeWordOnly
    End Sub

End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using Foxit.PDF.Viewer;

namespace PDFViewerDemo
{
    public class Form1 : System.Windows.Forms.Form
    {
        private PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }																				

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            pdfViewer.SearchDialogShowing += new Foxit.PDF.Viewer.SearchDialogShowingEventHandler(this.pdfViewer_SearchDialogShowing);
        }

        private void pdfViewer_SearchDialogShowing(object sender, Foxit.PDF.Viewer.SearchDialogShowingEventArgs e)
        {
            // Hide the search dialog.
            e.Cancel = true;

            // Set the match option for search
            e.MatchOption = MatchOptions.WholeWordOnly;
        }
    }
}
</code></example>
        </member>
        <member name="E:Foxit.PDF.Viewer.PdfViewer.Searched">
            <summary>
Occurs when the search term is found successfully.
</summary>
            <example>This example demonstrates, how to get the count of successful search results and status of search completion
using <see cref="T:Foxit.PDF.Viewer.SearchedEventArgs" /> class. <p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports Foxit.PDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub	
		    
    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler MyPdfViewer.Searched, AddressOf pdfViewer_Searched
    End Sub

    Private Sub pdfViewer_Searched(ByVal sender As Object, ByVal e As Foxit.PDF.Viewer.SearchedEventArgs)
        ' Get the status of search completion.
        Dim searchStatus As SearchStatus = e.Status

        ' Get the count of search results found.
        Dim count As Integer = e.Count
    End Sub
End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using Foxit.PDF.Viewer;

namespace PDFViewerDemo
{
    public class Form1 : Form
    {
        private PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }																

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            pdfViewer.Searched += new Foxit.PDF.Viewer.SearchedEventHandler(this.pdfViewer_Searched);
        }

        private void pdfViewer_Searched(object sender, Foxit.PDF.Viewer.SearchedEventArgs e)
        {
            // Get the status of search completion.
            SearchStatus searchStatus = e.Status;

            // Get the count of search results found.
            int count = e.Count;
        }
    }
}         
</code></example>
        </member>
        <member name="E:Foxit.PDF.Viewer.PdfViewer.SearchProgressing">
            <summary>
Occurs when the search for a string is in progress.
</summary>
            <remarks> To cancel the search which is in progress set the value of Cancel to true otherwise by default it is false. </remarks>
            <example>This example demonstrates, how to get the search term, match option used, current page numberwhere search is going on 
and cancelling the search using <see cref="T:Foxit.PDF.Viewer.SearchProgressingEventArgs" /> class. <p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports Foxit.PDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub	
		    
    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler MyPdfViewer.SearchProgressing, AddressOf MyPdfViewer_SearchProgressing
    End Sub

    Private Sub MyPdfViewer_SearchProgressing(ByVal sender As Object, ByVal e As Foxit.PDF.Viewer.SearchProgressingEventArgs)
        ' Get the search string.
        Dim MysearchTerm As String = e.SearchTerm

        ' Get the Match option used for searching.
        Dim [option] As MatchOptions = DirectCast(e.MatchOption, MatchOptions)

        ' If user wants to cancel the search. Use the below commented code.
        'e.Cancel = true;

        ' Get the current page number where search is in progress.
        Dim pagenumber As Integer = e.CurrentPageNumber
    End Sub

End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using Foxit.PDF.Viewer;

namespace PDFViewerDemo
{
    public class Form1 : Form
    {
        private PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }												

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            pdfViewer.SearchProgressing += new Foxit.PDF.Viewer.SearchProgressingEventHandler(this.pdfViewer_SearchProgressing);
        }

        private void pdfViewer_SearchProgressing(object sender, Foxit.PDF.Viewer.SearchProgressingEventArgs e)
        {
            // Get the search string.
            string searchTerm = e.SearchTerm;

            // Get the Match option used for searching.
            MatchOptions option = (MatchOptions)e.MatchOption;

            // If user wants to cancel the search. Use the below commented code.
            //e.Cancel = true;

            // Get the current page number where search is in progress.
            int pagenumber = e.CurrentPageNumber;
        }
    }
}         
</code></example>
        </member>
        <member name="E:Foxit.PDF.Viewer.PdfViewer.DocumentDisplayed">
            <summary>
Occurs after the PDF document is displayed.
</summary>
            <example>This example shows, how to get displayed PDF document details using <see cref="E:Foxit.PDF.Viewer.PdfViewer.DocumentDisplayed" /> event.<p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports Foxit.PDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub	
		    
    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler MyPdfViewer.DocumentDisplayed, AddressOf MyPdfViewer_DocumentDisplayed
    End Sub

    Private Sub MyPdfViewer_DocumentDisplayed(ByVal sender As Object, ByVal e As Foxit.PDF.Viewer.DocumentDisplayedEventArgs)
        ' Get the displayed PDF document details.
        Dim Author As String = e.Document.Author
        Dim MyBookmarks As BookmarkList = e.Document.Bookmarks
        Dim Creator As String = e.Document.Creator
        Dim Keywords As String = e.Document.Keywords
        Dim PageCount As Integer = e.Document.PageCount
        Dim Producer As String = e.Document.Producer
        Dim Subject As String = e.Document.Subject
        Dim Title As String = e.Document.Title
    End Sub

End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using Foxit.PDF.Viewer;

namespace PDFViewerDemo
{
    public class Form1 : System.Windows.Forms.Form
    {
        private PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }								

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            pdfViewer.DocumentDisplayed += new Foxit.PDF.Viewer.DocumentDisplayedEventHandler(this.pdfViewer_DocumentDisplayed);
        }

        private void pdfViewer_DocumentDisplayed(object sender, Foxit.PDF.Viewer.DocumentDisplayedEventArgs e)
        {
            // Get the displayed PDF document details.
            string Author = e.Document.Author;
            BookmarkList Bookmarks = e.Document.Bookmarks;
            string Creator = e.Document.Creator;
            string Keywords = e.Document.Keywords;
            int PageCount = e.Document.PageCount;
            string Producer = e.Document.Producer;
            string Subject = e.Document.Subject;
            string Title = e.Document.Title;
        }
    }
}
</code></example>
        </member>
        <member name="E:Foxit.PDF.Viewer.PdfViewer.DialogShowing">
            <summary>
Occurs before the File open dialog and Print dialog is displayed.
</summary>
            <example>This example shows, how to cancel a file open dialog display using <see cref="E:Foxit.PDF.Viewer.PdfViewer.DialogShowing" /> event<p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports Foxit.PDF.Viewer


Public Class Form1
	Inherits System.Windows.Forms.Form
	Private pdfViewer As PdfViewer

	Public Sub New()
		InitializeComponent()
	End Sub

	[STAThread]
	Private Shared Sub Main()
		Application.Run(New Form1())
	End Sub

	Private Sub InitializeComponent()
		Me.pdfViewer = New PdfViewer()
		Me.Controls.Add(pdfViewer)
		AddHandler pdfViewer.DialogShowing, AddressOf Me.pdfViewer_DialogShowing
	End Sub

	Private Sub pdfViewer_DialogShowing(sender As Object, e As Foxit.PDF.Viewer.DialogShowingEventArgs)
		' Preventing File Open dialog from displaying using DialogShowing event.
		If e.DisplayingDialogType = DialogType.FileOpenDialog Then
			e.Cancel = True
		End If
	End Sub
End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using Foxit.PDF.Viewer;

namespace PDFViewerDemo
{
	public class Form1 : System.Windows.Forms.Form
	{
		private PdfViewer pdfViewer;

		public Form1()
		{
			InitializeComponent();
		}

		static void Main()
		{
			Application.Run(new Form1());
		}

		private void InitializeComponent()
		{
			this.pdfViewer = new PdfViewer();
			this.Controls.Add(pdfViewer);
			pdfViewer.DialogShowing += new Foxit.PDF.Viewer.DialogShowingEventHandler(this.pdfViewer_DialogShowing);
		}

		private void pdfViewer_DialogShowing(object sender, Foxit.PDF.Viewer.DialogShowingEventArgs e)
		{
			// Preventing File Open dialog from displaying using DialogShowing event.
			if (e.DisplayingDialogType == DialogType.FileOpenDialog)
			{
				e.Cancel = true;
			}
		}
	}
}
</code></example>
        </member>
        <member name="E:Foxit.PDF.Viewer.PdfViewer.DocumentDisplaying">
            <summary>
Occurs before the PDF document is displayed.
</summary>
            <example>This example shows, how to cancel a PDF file opening using <see cref="E:Foxit.PDF.Viewer.PdfViewer.DocumentDisplaying" /> event<p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports Foxit.PDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub	
		    
    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler MyPdfViewer.DocumentDisplaying, AddressOf MyPdfViewer_DocumentDisplaying
    End Sub

    Private Sub MyPdfViewer_DocumentDisplaying(ByVal sender As Object, ByVal e As Foxit.PDF.Viewer.DocumentDisplayingEventArgs)
        ' Setting the navigation panel's visible tab while displaying the document.
        e.InitialVisibleNavigationPane = Foxit.PDF.Viewer.NavigationPane.Bookmark
    End Sub

End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using Foxit.PDF.Viewer;

namespace PDFViewerDemo
{
    public class Form1 : System.Windows.Forms.Form
    {
        private PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }				
			
        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            pdfViewer.DocumentDisplaying += new Foxit.PDF.Viewer.DocumentDisplayingEventHandler(this.pdfViewer_DocumentDisplaying);
        }

        private void pdfViewer_DocumentDisplaying(object sender, Foxit.PDF.Viewer.DocumentDisplayingEventArgs e)
        {
            // Setting the navigation panel's visible tab while displaying the document.
            e.InitialVisibleNavigationPane = Foxit.PDF.Viewer.NavigationPane.Bookmark;
        }
    }
}

</code></example>
        </member>
        <member name="E:Foxit.PDF.Viewer.PdfViewer.FileOpenDialogShowing">
            <summary>
Occurs when the file open dialog is being displayed.
</summary>
            <example>This example shows, how to set initial directory of displaying file dialog using <see cref="E:Foxit.PDF.Viewer.PdfViewer.FileOpenDialogShowing" /> event.<p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports Foxit.PDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub	
		    
    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler MyPdfViewer.FileOpenDialogShowing, AddressOf MyPdfViewer_FileOpenDialogShowing
    End Sub

    Private Sub MyPdfViewer_FileOpenDialogShowing(ByVal sender As Object, ByVal e As Foxit.PDF.Viewer.FileOpenDialogShowingEventArgs)
        ' Set the initial directory for the file dialog window.
        e.InitialDirectory = "MyFolderPath"
    End Sub

End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using Foxit.PDF.Viewer;

namespace PDFViewerDemo
{
    public class Form1 : System.Windows.Forms.Form
    {
        private PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            pdfViewer.FileOpenDialogShowing += new Foxit.PDF.Viewer.FileOpenDialogShowingEventHandler(this.pdfViewer_FileOpenDialogShowing);
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }				

        private void pdfViewer_FileOpenDialogShowing(object sender, Foxit.PDF.Viewer.FileOpenDialogShowingEventArgs e)
        {
            // Set the initial directory for the file dialog window.
            e.InitialDirectory = "MyFolderPath";
        }
    }
}
</code></example>
        </member>
        <member name="E:Foxit.PDF.Viewer.PdfViewer.FileOpenFailed">
            <summary>
Occurs when the PDF file open failed.
</summary>
            <example>This example shows ,how to access  exception details using  <see cref="E:Foxit.PDF.Viewer.PdfViewer.FileOpenFailed" /> event, in the case of PDF document open failure.<p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports Foxit.PDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub	
		    
    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler MyPdfViewer.FileOpenFailed, AddressOf MyPdfViewer_FileOpenFailed 
    End Sub

    Private Sub MyPdfViewer_FileOpenFailed(ByVal sender As Object, ByVal e As Foxit.PDF.Viewer.FileOpenFailedEventArgs)
        ' Get the exception.
        Dim failReason As String = e.Exception.Message
    End Sub

End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using Foxit.PDF.Viewer;

namespace PDFViewerDemo
{
    public class Form1 : System.Windows.Forms.Form
    {
        private PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            pdfViewer.FileOpenFailed += new Foxit.PDF.Viewer.FileOpenFailedEventHandler(this.pdfViewer_FileOpenFailed);
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }

        private void pdfViewer_FileOpenFailed(object sender, Foxit.PDF.Viewer.FileOpenFailedEventArgs e)
        {
            // Get the exception.
            string failReason = e.Exception.Message;
        }
    }
}
</code></example>
        </member>
        <member name="E:Foxit.PDF.Viewer.PdfViewer.FileOpened">
            <summary>
Occurs after the PDF file is opened.
</summary>
            <example>This example shows, how to get displayed PDF document details using <see cref="E:Foxit.PDF.Viewer.PdfViewer.FileOpened" /> event.<p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports Foxit.PDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub	
		    
    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler MyPdfViewer.FileOpened, AddressOf MyPdfViewer_FileOpened 
    End Sub

    Private Sub MyPdfViewer_FileOpened(ByVal sender As Object, ByVal e As Foxit.PDF.Viewer.FileOpenedEventArgs)
        ' Get the displayed PDF document details.
        Dim Author As String = e.PdfDocument.Author
        Dim MyBookmarks As BookmarkList = e.PdfDocument.Bookmarks
        Dim Creator As String = e.PdfDocument.Creator
        Dim Keywords As String = e.PdfDocument.Keywords
        Dim PageCount As Integer = e.PdfDocument.PageCount
        Dim Producer As String = e.PdfDocument.Producer
        Dim Subject As String = e.PdfDocument.Subject
        Dim Title As String = e.PdfDocument.Title
    End Sub

End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using Foxit.PDF.Viewer;

namespace PDFViewerDemo
{
    public class Form1 : System.Windows.Forms.Form
    {
        private PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            pdfViewer.FileOpened += new Foxit.PDF.Viewer.FileOpenedEventHandler(this.pdfViewer_FileOpened);
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }

        private void pdfViewer_FileOpened(object sender, Foxit.PDF.Viewer.FileOpenedEventArgs e)
        {
            // Getting displayed PDF document details.
            string Author = e.PdfDocument.Author;
            BookmarkList Bookmarks = e.PdfDocument.Bookmarks;
            string Creator = e.PdfDocument.Creator;
            string Keywords = e.PdfDocument.Keywords;
            int PageCount = e.PdfDocument.PageCount;
            string Producer = e.PdfDocument.Producer;
            string Subject = e.PdfDocument.Subject;
            string Title = e.PdfDocument.Title;
        }
    }
}
</code></example>
        </member>
        <member name="E:Foxit.PDF.Viewer.PdfViewer.PasswordRequired">
            <summary>
Occurs when the PDF file needed a password to open.
</summary>
            <example>This example shows,how to set password of a PDF file using <see cref="E:Foxit.PDF.Viewer.PdfViewer.PasswordRequired" /> event<p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports Foxit.PDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub	
		    
    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler MyPdfViewer.PasswordRequired, AddressOf pdfViewer_PasswordRequired 
    End Sub

    Private Sub pdfViewer_PasswordRequired(ByVal sender As Object, ByVal e As Foxit.PDF.Viewer.PasswordRequiredEventArgs)
        ' Setting PDF password to open the file.
        e.Password = "mypassword"
    End Sub

    End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using Foxit.PDF.Viewer;

namespace PDFViewerDemo
{
    public class Form1 : System.Windows.Forms.Form
    {
        private PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            pdfViewer.PasswordRequired += new Foxit.PDF.Viewer.PasswordRequiredEventHandler(this.pdfViewer_PasswordRequired);
        }

        private void pdfViewer_PasswordRequired(object sender, Foxit.PDF.Viewer.PasswordRequiredEventArgs e)
        {
            // Setting PDF password to open the file.
            e.Password = "mypassword";
        }
    }
}
</code></example>
        </member>
        <member name="E:Foxit.PDF.Viewer.PdfViewer.FileOpening">
            <summary>
Occurs before the PDF file is opened.
</summary>
            <example>This example shows, how to cancel a PDF file open using the <see cref="E:Foxit.PDF.Viewer.PdfViewer.FileOpening" /> event.<p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports Foxit.PDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler MyPdfViewer.FileOpening, AddressOf MyPdfViewer_FileOpening
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
    Private Sub MyPdfViewer_FileOpening(ByVal sender As Object, ByVal e As Foxit.PDF.Viewer.FileOpeningEventArgs)
        ' Cancel the file open.             
        e.Cancel = True
    End Sub

End Class						
</code><code lang="C#">
using System;
using System.Windows.Forms;
using Foxit.PDF.Viewer;

namespace PDFViewerDemo
{
    public class Form1 : System.Windows.Forms.Form
    {
        private PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            pdfViewer.FileOpening += new Foxit.PDF.Viewer.FileOpeningEventHandler(this.pdfViewer_FileOpening);
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }

        private void pdfViewer_FileOpening(object sender, Foxit.PDF.Viewer.FileOpeningEventArgs e)
        {
            // Cancel the file open.
            e.Cancel = true;
        }
    }
}
</code></example>
        </member>
        <member name="E:Foxit.PDF.Viewer.PdfViewer.ExceptionOccurred">
            <summary>
Occurs before the PDF file is opened.
</summary>
            <example>This example shows, how to cancel a PDF file open using the <see cref="E:Foxit.PDF.Viewer.PdfViewer.FileOpening" /> event.<p /><code lang="VB">
Imports System.Windows.Forms
Imports Foxit.PDF.Viewer

namespace PDFViewerDemo
	Public Class Form1
		Inherits Form
		Private pdfViewer As PdfViewer

		Public Sub New()
			InitializeComponent()
		End Sub

		Public Shared Sub Main()
			Application.Run(New Form1())
		End Sub

		Private Sub InitializeComponent()
			Me.pdfViewer = New PdfViewer()
			Me.Controls.Add(pdfViewer)
			AddHandler Me.pdfViewer.ExceptionOccurred, New ExceptionOccurredEventHandler(AddressOf pdfViewer_ExceptionOccurred)
		End Sub

		Private Sub pdfViewer_ExceptionOccurred(sender As Object, e As ExceptionOccurredEventArgs)
			MessageBox.Show(e.Exception.Message)
		End Sub
	End Class
End Namespace
</code><code lang="C#">
using System;
using System.Windows.Forms;
using Foxit.PDF.Viewer;

namespace PDFViewerDemo
{
	public class Form1 : Form
	{
		private PdfViewer pdfViewer;

		public Form1()
		{
			InitializeComponent();
		}

		[STAThread]
		static void Main()
		{
			Application.Run(new Form1());
		}

		private void InitializeComponent()
		{
			this.pdfViewer = new PdfViewer();
			this.Controls.Add(pdfViewer);
			this.pdfViewer.ExceptionOccurred += pdfViewer_ExceptionOccurred;
		}

		void pdfViewer_ExceptionOccurred(object sender, ExceptionOccurredEventArgs e)
		{
			MessageBox.Show(e.Exception.Message);
		}

	}
}
</code></example>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfViewer.ShowStatusBar">
            <summary>
Hides or unhides the status bar.
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfViewer.ViewerToolbar">
            <summary>
                <span style="color:red">Obsolete.</span>
Gets or sets the PdfToolStrip of the viewer control.
</summary>
            <remarks>
                <span style="color:red">NOTE: This property is obsolete.</span> Use <see cref="P:Foxit.PDF.Viewer.PdfViewer.ToolStrip" /> property instead.
</remarks>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfViewer.ToolStrip">
            <summary>
Gets or sets the PdfToolStrip of the viewer control.
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfViewer.DisplayUnit">
            <summary>
Gets or sets the display unit.
</summary>
            <remarks> All the size information displayed by the control will be based on the units set on this property.For eg: Status Bar. </remarks>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfViewer.FilePath">
            <summary>
Gets the file path of the document on display.
</summary>
            <remarks> The value will be null when the document on display is opened by passing <see cref="T:Foxit.PDF.Viewer.PdfDocument" /> to the Open method. </remarks>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfViewer.VisibleNavigationPane">
            <summary>
Gets or sets the value of navigation pane to be visible for displayed document.
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfViewer.ZoomPercent">
            <summary>
Gets or sets the value of page zoom percent for displayed document.
</summary>
            <remarks> This value ranges from .01f to 64.0f. </remarks>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfViewer.CursorMode">
            <summary>
Gets or sets the cursor mode for the document.
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfViewer.ZoomMode">
            <summary>
Gets or sets the Zoom Mode of the document.
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfViewer.PageMode">
            <summary>
Gets or sets the Page Display mode of the document.
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfViewer.PageOrientation">
            <summary>
Gets or sets the Orientation of the page.
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfViewer.HasNextView">
            <summary>
Gets a boolean value to show if next view history contains any view or not.
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfViewer.HasPreviousView">
            <summary>
Gets a boolean value to show if previous view history contains any view or not.
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfViewer.NavigationPanelWidth">
            <summary>
Gets or sets the PdfNavigationPanel width.
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfViewer.ShowThumbnailIcon">
            <summary>
Gets or sets the value to show/hide thumbnails icon in navigation panel.
</summary>
            <remarks> True value will show the thumbnail icon in the navigation panel. </remarks>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfViewer.ShowBookmarkIcon">
            <summary>
Gets or sets the value to show/hide the bookmarks icon in navigation panel.
</summary>
            <remarks> True value will show the bookmark icon in the navigation panel. </remarks>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfViewer.BackColor">
            <summary>
Gets or sets the Back Color of the document.
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfViewer.PageColor">
            <summary>
Gets or sets the Page Color of the document.
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfViewer.ShowNavigationPanel">
            <summary>
Gets or sets the boolean to show/hide the navigation panel.
</summary>
            <remarks> True value will show the navigation panel. </remarks>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfViewer.ShowToolbar">
            <summary>
                <span style="color:red">Obsolete.</span>
Gets or sets the boolean to show/hide the PdfToolStrip.
</summary>
            <remarks>
                <span style="color:red">NOTE: This property is obsolete.</span> Use  <see cref="P:Foxit.PDF.Viewer.PdfViewer.ShowToolStrip" /> property instead.
</remarks>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfViewer.ShowToolStrip">
            <summary>
Gets or sets the boolean to show/hide the PdfToolStrip.
</summary>
            <remarks> True value will show the default PdfToolStrip. </remarks>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfViewer.InitialVisibleNavigationPane">
            <summary>
Gets or sets the value of navigation pane to be visible when displaying a document.
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfViewer.InitialOrientation">
            <summary>
Gets or sets the value of page orientation when displaying a document.
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfViewer.InitialZoomPercent">
            <summary>
Gets or sets the value of page zoom percent when displaying a document.
</summary>
            <remarks> This value ranges from .01f to 64.0f. </remarks>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfViewer.InitialZoomMode">
            <summary>
Gets or sets the value of page zoom mode when displaying a document.
</summary>
            <remarks> If zoom percent mode is selected then the value of <see cref="P:Foxit.PDF.Viewer.PdfViewer.InitialZoomPercent" /> has to be specified. Otherwise it will be .01f by default. </remarks>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfViewer.InitialPageMode">
            <summary>
Gets or sets the value of page mode when displaying a document.
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfViewer.InitialPage">
            <summary>
Gets or sets the value of initial page when displaying a document.
</summary>
            <remarks> The value should be a positive number and it will be 0 by default in case if it exceeds the total number of pages or not set. </remarks>
        </member>
        <member name="M:Foxit.PDF.Viewer.PdfViewer.#ctor">
            <summary>
Initializes a new instance of the PdfViewer class.
</summary>
        </member>
        <member name="T:Foxit.PDF.Viewer.PdfViewer">
            <summary>
Represents the PdfViewer control.
</summary>
            <example>This example shows, how to load a PDF document in <see cref="T:Foxit.PDF.Viewer.PdfViewer" />.<p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports Foxit.PDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
    Private Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs) Handles MyBase.Load
        ' Load and Open the document in Viewer.
        Dim MyDocument As New PdfDocument("C:\MyDocument.pdf")
        MyPdfViewer.Open(MyDocument)
    End Sub

End Class						
</code><code lang="C#">
using System;
using System.Windows.Forms;
using Foxit.PDF.Viewer;

namespace PDFViewerDemo
{
    public class Form1 : Form
    {
        private Foxit.PDF.Viewer.PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
            this.Load += new EventHandler(Form1_Load);
        }

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            // Load and Open the document in Viewer.
            PdfDocument document = new PdfDocument(@"C:\MyDocument.pdf");
            pdfViewer.Open(document);
        }
    }
}
</code></example>
            <licensing>
This class is a Foxit PDF Viewer feature. The following license is required for non-evaluation usage:
<list type="bullet"><item>Foxit PDF Viewer for .NET SDK</item></list></licensing>
        </member>
        <member name="T:Foxit.PDF.Viewer.ExceptionOccurredEventHandler">
            <summary>
Represents the method that will handle the <see cref="!:ExceptionOccurred" /> event.
</summary>
            <remarks>When you create a <b>ExceptionOccurredEventHandler</b> delegate, you identify the method that will handle the event. 
To associate the event with your event handler, add an instance of the delegate to the event. 
The event handler is called whenever the event occurs, unless you remove the delegate. </remarks>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Foxit.PDF.Viewer.ExceptionOccurredEventArgs" /> that contains the event data.</param>
            <example> For example refer to <see cref="!:ExceptionOccurred" /> event. </example>
        </member>
        <member name="T:Foxit.PDF.Viewer.PagePrintingEventHandler">
            <summary>
Represents the method that will handle the <see cref="!:PagePrinting" /> event.
</summary>
            <remarks>When you create a <b>PagePrintingEventHandler</b> delegate, you identify the method that will handle the event. 
To associate the event with your event handler, add an instance of the delegate to the event. 
The event handler is called whenever the event occurs, unless you remove the delegate. </remarks>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Foxit.PDF.Viewer.PagePrintingEventArgs" /> that contains the event data.</param>
            <example> For example refer to <see cref="!:PagePrinting" /> event. </example>
        </member>
        <member name="T:Foxit.PDF.Viewer.DocumentPrintedEventHandler">
            <summary>
Represents the method that will handle the <see cref="!:DocumentPrinted" /> event.
</summary>
            <remarks>When you create a <b>DocumentPrintedEventHandler</b> delegate, you identify the method that will handle the event. 
To associate the event with your event handler, add an instance of the delegate to the event. 
The event handler is called whenever the event occurs, unless you remove the delegate. </remarks>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Foxit.PDF.Viewer.DocumentPrintedEventArgs" /> that contains the event data.</param>
            <example> For example refer to <see cref="!:DocumentPrinted" /> event. </example>
        </member>
        <member name="T:Foxit.PDF.Viewer.DocumentPrintingEventHandler">
            <summary>
Represents the method that will handle the <see cref="!:DocumentPrinting" /> event.
</summary>
            <remarks>When you create a <b>DocumentPrintingEventHandler</b> delegate, you identify the method that will handle the event. 
To associate the event with your event handler, add an instance of the delegate to the event. 
The event handler is called whenever the event occurs, unless you remove the delegate. </remarks>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Foxit.PDF.Viewer.DocumentPrintingEventArgs" /> that contains the event data.</param>
            <example> For example refer to <see cref="!:DocumentPrinting" /> event. </example>
        </member>
        <member name="T:Foxit.PDF.Viewer.PdfViewerMouseEventHandler">
            <summary>
Represents the method that will handle the <see cref="!:PdfViewerMouseClick" /> or <see cref="!:PdfViewerMouseMove" /> event.
</summary>
            <remarks>When you create a <b>PdfViewerMouseEventHandler</b> delegate, you identify the method that will handle the event. 
To associate the event with your event handler, add an instance of the delegate to the event. 
The event handler is called whenever the event occurs, unless you remove the delegate. </remarks>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Foxit.PDF.Viewer.PdfViewerMouseEventArgs" /> that contains the event data.</param>
            <example> For example refer to <see cref="!:PdfViewerMouseClick" /> event. </example>
        </member>
        <member name="T:Foxit.PDF.Viewer.LinkClickEventHandler">
            <summary>
Represents the method that will handle the <see cref="!:LinkClicked" /> event.
</summary>
            <remarks>When you create a <b>LinkClickEventHandler</b> delegate, you identify the method that will handle the event. 
To associate the event with your event handler, add an instance of the delegate to the event. 
The event handler is called whenever the event occurs, unless you remove the delegate. </remarks>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Foxit.PDF.Viewer.LinkClickedEventArgs" /> that contains the event data.</param>
            <example> For example refer to <see cref="!:LinkClicked" /> event. </example>
        </member>
        <member name="T:Foxit.PDF.Viewer.ContextMenuShowingEventHandler">
            <summary>
Represents the method that will handle the <see cref="!:ContextMenuShowing" /> event.
</summary>
            <remarks>When you create a <b>ContextMenuShowingEventHandler</b> delegate, you identify the method that will handle the event. 
To associate the event with your event handler, add an instance of the delegate to the event. 
The event handler is called whenever the event occurs, unless you remove the delegate. </remarks>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Foxit.PDF.Viewer.ContextMenuShowingEventArgs" /> that contains the event data.</param>
            <example> For example refer to <see cref="!:ContextMenuShowing" /> event. </example>
        </member>
        <member name="T:Foxit.PDF.Viewer.CursorModeChangedEventHandler">
            <summary>
Represents the method that will handle the <see cref="!:CursorModeChanged" /> event.
</summary>
            <remarks>When you create a <b>CursorModeChangedEventHandler</b> delegate, you identify the method that will handle the event. 
To associate the event with your event handler, add an instance of the delegate to the event. 
The event handler is called whenever the event occurs, unless you remove the delegate. </remarks>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Foxit.PDF.Viewer.CursorModeChangedEventArgs" /> that contains the event data.</param>
            <example> For example refer to <see cref="!:CursorModeChanged" /> event. </example>
        </member>
        <member name="T:Foxit.PDF.Viewer.TextSelectedEventHandler">
            <summary>
Represents the method that will handle the <see cref="!:TextSelected" /> event.
</summary>
            <remarks>When you create a <b>TextSelectedEventHandler</b> delegate, you identify the method that will handle the event. 
To associate the event with your event handler, add an instance of the delegate to the event. 
The event handler is called whenever the event occurs, unless you remove the delegate. </remarks>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Foxit.PDF.Viewer.TextSelectedEventArgs" /> that contains the event data.</param>
            <example> For example refer to <see cref="!:TextSelected" /> event. </example>
        </member>
        <member name="T:Foxit.PDF.Viewer.TextSelectingEventHandler">
            <summary>
Represents the method that will handle the <see cref="!:TextSelecting" /> event.
</summary>
            <remarks>When you create a <b>TextSelectingEventHandler</b> delegate, you identify the method that will handle the event. 
To associate the event with your event handler, add an instance of the delegate to the event. 
The event handler is called whenever the event occurs, unless you remove the delegate. </remarks>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Foxit.PDF.Viewer.TextSelectingEventArgs" /> that contains the event data.</param>
            <example> For example refer to <see cref="!:TextSelecting" /> event. </example>
        </member>
        <member name="T:Foxit.PDF.Viewer.ViewChangedEventHandler">
            <summary>
Represents the mehtod that will handle the <see cref="!:ViewChanged" /> event.
</summary>
            <remarks>When you create a <b>ViewChangedEventHandler</b> delegate, you identify the method that will handle the event. 
To associate the event with your event handler, add an instance of the delegate to the event. 
The event handler is called whenever the event occurs, unless you remove the delegate. </remarks>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Foxit.PDF.Viewer.ViewChangedEventArgs" /> that contains the event data.</param>
            <example> For example refer to <see cref="!:ViewChanged" /> event. </example>
        </member>
        <member name="T:Foxit.PDF.Viewer.DocumentDisplayedEventHandler">
            <summary>
Represents the method that will handle the <see cref="!:DocumentDisplayed" /> event.
</summary>
            <remarks>When you create a <b>DocumentDisplayedEventHandler</b> delegate, you identify the method that will handle the event. 
To associate the event with your event handler, add an instance of the delegate to the event. 
The event handler is called whenever the event occurs, unless you remove the delegate. </remarks>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Foxit.PDF.Viewer.DocumentDisplayedEventArgs" /> that contains the event data.</param>
            <example> For example refer to <see cref="!:DocumentDisplayed" /> event. </example>
        </member>
        <member name="T:Foxit.PDF.Viewer.DocumentDisplayingEventHandler">
            <summary>
Represents the method that will handle the <see cref="!:DocumentDisplaying" /> event.
</summary>
            <remarks>When you create a <b>DocumentDisplayingEventHandler</b> delegate, you identify the method that will handle the event. 
To associate the event with your event handler, add an instance of the delegate to the event. 
The event handler is called whenever the event occurs, unless you remove the delegate. </remarks>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Foxit.PDF.Viewer.DocumentDisplayingEventArgs" /> that contains the event data.</param>
            <example> For example refer to <see cref="!:DocumentDisplaying" /> event. </example>
        </member>
        <member name="T:Foxit.PDF.Viewer.DialogShowingEventHandler">
            <summary>
Represents the method that will handle the <see cref="!:DialogShowing" /> event.
</summary>
            <remarks>When you create a <b>DialogShowingEventHandler</b> delegate, you identify the method that will handle the event. 
To associate the event with your event handler, add an instance of the delegate to the event. 
The event handler is called whenever the event occurs, unless you remove the delegate. </remarks>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Foxit.PDF.Viewer.DialogShowingEventArgs" /> that contains the event data.</param>
            <example> For example refer to <see cref="!:DialogShowing" /> event. </example>
        </member>
        <member name="T:Foxit.PDF.Viewer.FileOpenDialogShowingEventHandler">
            <summary>
Represents the method that will handle the <see cref="!:FileOpenDialogShowing" /> event.
</summary>
            <remarks>When you create a <b>FileOpenDialogShowingEventHandler</b> delegate, you identify the method that will handle the event. 
To associate the event with your event handler, add an instance of the delegate to the event. 
The event handler is called whenever the event occurs, unless you remove the delegate. </remarks>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Foxit.PDF.Viewer.FileOpenDialogShowingEventArgs" /> that contains the event data.</param>
            <example> For example refer to <see cref="!:FileOpenDialogShowing" /> event. </example>
        </member>
        <member name="T:Foxit.PDF.Viewer.FileOpenFailedEventHandler">
            <summary>
Represents the method that will handle the <see cref="!:FileOpenFailed" /> event.
</summary>
            <remarks>When you create a <b>FileOpenFailedEventHandler</b> delegate, you identify the method that will handle the event. 
To associate the event with your event handler, add an instance of the delegate to the event. 
The event handler is called whenever the event occurs, unless you remove the delegate. </remarks>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Foxit.PDF.Viewer.FileOpenFailedEventArgs" /> that contains the event data.</param>
            <example> For example refer to <see cref="!:FileOpenFailed" /> event. </example>
        </member>
        <member name="T:Foxit.PDF.Viewer.FileOpenedEventHandler">
            <summary>
Represents the method that will handle the <see cref="!:FileOpened" /> event.
</summary>
            <remarks>When you create a <b>FileOpenedEventHandler</b> delegate, you identify the method that will handle the event. 
To associate the event with your event handler, add an instance of the delegate to the event. 
The event handler is called whenever the event occurs, unless you remove the delegate. </remarks>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Foxit.PDF.Viewer.FileOpenedEventArgs" /> that contains the event data.</param>
            <example> For example refer to <see cref="!:FileOpened" /> event. </example>
        </member>
        <member name="T:Foxit.PDF.Viewer.PasswordRequiredEventHandler">
            <summary>
Represents the method that will handle the <see cref="!:PasswordRequired" /> event.
</summary>
            <remarks>When you create a <b>PasswordRequiredEventHandler</b> delegate, you identify the method that will handle the event. 
To associate the event with your event handler, add an instance of the delegate to the event. 
The event handler is called whenever the event occurs, unless you remove the delegate. </remarks>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Foxit.PDF.Viewer.PasswordRequiredEventArgs" /> that contains the event data.</param>
            <example> For example refer to <see cref="!:PasswordRequired" /> event. </example>
        </member>
        <member name="T:Foxit.PDF.Viewer.FileOpeningEventHandler">
            <summary>
Represents the method that will handle the <see cref="!:FileOpening" /> event.
</summary>
            <remarks>When you create a <b>FileOpeningEventHandler</b> delegate, you identify the method that will handle the event. 
To associate the event with your event handler, add an instance of the delegate to the event. 
The event handler is called whenever the event occurs, unless you remove the delegate. </remarks>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Foxit.PDF.Viewer.FileOpeningEventArgs" /> that contains the event data.</param>
            <example> For example refer to <see cref="!:FileOpening" /> event. </example>
        </member>
        <member name="T:Foxit.PDF.Viewer.SearchDialogShowingEventHandler">
            <summary>
Represents the method that will handle the <see cref="!:SearchDialogShowing" /> event.
</summary>
            <remarks>When you create a <b>SearchDialogShowingEventHandler</b> delegate, you identify the method that will handle the event. 
To associate the event with your event handler, add an instance of the delegate to the event. 
The event handler is called whenever the event occurs, unless you remove the delegate. </remarks>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Foxit.PDF.Viewer.SearchDialogShowingEventArgs" /> that contains the event data.</param>
            <example> For example refer to <see cref="!:SearchDialogShowing" /> event. </example>
        </member>
        <member name="T:Foxit.PDF.Viewer.SearchedEventHandler">
            <summary>
Represents the method that will handle the <see cref="!:Searched" /> event.
</summary>
            <remarks>When you create a <b>SearchedEventHandler</b> delegate, you identify the method that will handle the event. 
To associate the event with your event handler, add an instance of the delegate to the event. 
The event handler is called whenever the event occurs, unless you remove the delegate. </remarks>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Foxit.PDF.Viewer.SearchedEventArgs" /> that contains the event data.</param>
            <example> For example refer to <see cref="!:Searched" /> event. </example>
        </member>
        <member name="T:Foxit.PDF.Viewer.SearchProgressingEventHandler">
            <summary>
Represents the method that will handle the <see cref="!:SearchProgressing" /> event.
</summary>
            <remarks>When you create a <b>SearchProgressingEventHandler</b> delegate, you identify the method that will handle the event. 
To associate the event with your event handler, add an instance of the delegate to the event. 
The event handler is called whenever the event occurs, unless you remove the delegate. </remarks>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Foxit.PDF.Viewer.SearchProgressingEventArgs" /> that contains the event data.</param>
            <example> For example refer to <see cref="!:SearchProgressing" /> event. </example>
        </member>
        <member name="P:Foxit.PDF.Viewer.ExceptionOccurredEventArgs.Exception">
            <summary>
Gets the Exception.
</summary>
            <Remarks>Gets the Exception object which contains the details about the occurred exception.</Remarks>
        </member>
        <member name="T:Foxit.PDF.Viewer.ExceptionOccurredEventArgs">
            <summary>
Provides data for the <see cref="!:ExceptionOccurred" /> event. 
</summary>
            <example>For example refer to <see cref="!:ExceptionOccurred" /> event.</example>
            <licensing>
This class is a Foxit PDF Viewer feature. The following license is required for non-evaluation usage:
<list type="bullet"><item>Foxit PDF Viewer for .NET SDK</item></list></licensing>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfNavigationPanel.VisibleNavigationPane">
            <summary>
Gets or sets the value for navigation pane.
</summary>
            <remarks />
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfNavigationPanel.ShowShrinkIcon">
            <summary>
Gets or sets the value for Hiding the BookmarkThumbnail control
</summary>
            <remarks> True value will show/hide the minimize button present in the BookmarkThumbnail display control. </remarks>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfNavigationPanel.ShowThumbnailIcon">
            <summary>
Gets or sets the value to show/hide the Thumbnails icon in navigation panel.
</summary>
            <remarks> True value will show the Thumbnail icon in the navigation panel. </remarks>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfNavigationPanel.ShowBookmarkIcon">
            <summary>
Gets or sets the value to show/hide the bookmarks icon in navigation panel.
</summary>
            <remarks> True value will show the bookmark icon in the navigation panel. </remarks>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfNavigationPanel.ShowNavigationIconsOnExpand">
            <summary>
Gets or sets the value to show/hide the side icon panel which contain  in navigation panel.
</summary>
            <remarks> True value will show the side icon panel which contains the bookmarks and thumbnail icons in the navigation panel. </remarks>
        </member>
        <member name="M:Foxit.PDF.Viewer.PdfNavigationPanel.AssociateToPdfViewer(Foxit.PDF.Viewer.PdfViewer)">
            <summary>
Associates a new PdfNavigationPanel to the Existing PdfViewer
</summary>
        </member>
        <member name="M:Foxit.PDF.Viewer.PdfNavigationPanel.#ctor">
            <summary>
Initializes a new instance of the PdfNavigationPanel class.
</summary>
        </member>
        <member name="T:Foxit.PDF.Viewer.PdfNavigationPanel">
            <summary>
Represents a PdfNavigationPanel.
</summary>
            <example>This example demonstrates how to Associate a PdfNavigationPanel control to <see cref="T:Foxit.PDF.Viewer.PdfViewer" /> using <see cref="T:Foxit.PDF.Viewer.PdfNavigationPanel" />.<p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports Foxit.PDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer
    private MyNavigationPanel As PdfNavigationPanel

    Sub New()
        InitializeComponent()
    End Sub

	Private Sub InitializeComponent()
		Me.MyPdfViewer = New PdfViewer()
		MyNavigationPanel = New PdfNavigationPanel()
		Me.Controls.Add(MyPdfViewer)
		Me.Controls.Add(MyNavigationPanel)
	End Sub
    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
    Private Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs) Handles MyBase.Load
        Me.MyNavigationPanel.AssociateToPdfViewer(Me.MyPdfViewer)
		' When displaying a pdfviewer the navigationpanel will contain the  display of thumbnails present in a file
		Me.MyNavigationPanel.VisibleNavigationPane = NavigationPane.PageThumbnail
		' This showbookmarkIcon as false will disable the Bookmark Icon from SideIconPanel
		Me.MyNavigationPanel.ShowBookmarkIcon = false
		' SideIconPanel will be disabled Entrire PdfNavigationPanel will be displayed with the specified NavigationPane
		Me.MyNavigationPanel.ShowNavigationIconsOnExpand = false
		' This option Hideshrinkicon is set as true then He cannot minimize the navigationPanel.
		Me.MyNavigationPanel.ShowShrinkIcon = false
        Me.Controls.Add(MyPdfViewer)
		' used to remove navigationPanel
	    Me.MyNavigationPanel.AssociateToPdfViewer(nothing)
       
		Me.MyNavigationPanel.Dispose()
    End Sub	

End Class						
</code><code lang="C#">
using System;
using System.Windows.Forms;
using Foxit.PDF.Viewer;

namespace PDFViewerDemo
{
    public class Form1 : Form
    {
        private Foxit.PDF.Viewer.PdfViewer pdfViewer;
        private Foxit.PDF.Viewer.PdfNavigationPanel navigationPanel;

        public Form1()
        {
            InitializeComponent();
            this.Load += new EventHandler(Form1_Load);
        }

		private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            navigationPanel = new PdfNavigationPanel();
            this.Controls.Add(pdfViewer);
            this.Controls.Add(navigationPanel);
		}
        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }

        private void Form1_Load(object sender, EventArgs e)
        {
			// When displaying a pdfviewer the navigationpanel will contain the  display of thumbnails present in a file
            navigationPanel.VisibleNavigationPane = NavigationPane.PageThumbnail;
			//This showbookmarkIcon as false will disable the Bookmark Icon from SideIconPanel
			navigationPanel.ShowBookmarkIcon = false;
			//SideIconPanel will be disabled Entrire PdfNavigationPanel will be displayed with the specified NavigationPane
			this.navigationPanel.ShowNavigationIconsOnExpand = false;
			//This option Hideshrinkicon is set as true then He cannot minimize the navigationPanel.
			navigationPanel.ShowShrinkIcon = false;
			this.navigationPanel.AssociateToPdfViewer(this.pdfViewer);
			// used to remove navigationPanel
		    this.navigationPanel.AssociateToPdfViewer(null);
           
		    this.navigationPanel.Dispose();
        }
    }
}
</code></example>
            <licensing>
This class is a Foxit PDF Viewer feature. The following license is required for non-evaluation usage:
<list type="bullet"><item>Foxit PDF Viewer for .NET SDK</item></list></licensing>
        </member>
        <member name="P:Foxit.PDF.Viewer.DialogShowingEventArgs.DisplayingDialogType">
            <summary>
Gets the DisplayingDialogType Property.
</summary>
            <remarks>This property specifies the type of the dialog which is going to display.</remarks>
        </member>
        <member name="P:Foxit.PDF.Viewer.DialogShowingEventArgs.Cancel">
            <summary>
Gets or sets Cancel Property.
</summary>
            <remarks>True will cancel the appropriate dialog displaying.</remarks>
        </member>
        <member name="T:Foxit.PDF.Viewer.DialogShowingEventArgs">
            <summary>
Provides data for the <see cref="!:Foxit::PDF::Viewer::PdfViewer::DialogShowing" /> event. 
</summary>
            <example>For example refer to <see cref="!:Foxit.PDF.Viewer.PdfViewer.DialogShowing" /> event.</example>
            <licensing>
This class is a Foxit PDF Viewer feature. The following license is required for non-evaluation usage:
<list type="bullet"><item>Foxit PDF Viewer for .NET SDK</item></list></licensing>
        </member>
        <member name="T:Foxit.PDF.Viewer.DialogType">
            <summary>
Specifies the Dialog types. 
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.DialogType.PrintDialog">
            <summary>
Print Dialog type. 
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.DialogType.FileOpenDialog">
            <summary>
FileOpen dialog type. 
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.DocumentPrintingEventArgs.CancelPrinting">
            <summary>
Gets or sets a boolean. Setting true will cancel the printing.
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.DocumentPrintingEventArgs.PrinterName">
            <summary>
Gets the printer name to which the document is going to be printed.
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.DocumentPrintingEventArgs.Document">
            <summary>
Gets the PdfDocument.
</summary>
            <Remarks>Gets the PDF document currently displayed.</Remarks>
        </member>
        <member name="T:Foxit.PDF.Viewer.DocumentPrintingEventArgs">
            <summary>
Provides data for the <see cref="!:DocumentPrinting" /> event. 
</summary>
            <licensing>
This class is a Foxit PDF Viewer feature. The following license is required for non-evaluation usage:
<list type="bullet"><item>Foxit PDF Viewer for .NET SDK</item></list></licensing>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfViewerMouseEventArgs.PageY">
            <summary>
Gets the y-coordinate of the mouse during the generating mouse event. 
</summary>
            <remarks> If the event is generated out side of the PDF page then its value will be set to -1.  </remarks>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfViewerMouseEventArgs.PageX">
            <summary>
Gets the x-coordinate of the mouse on PDF page during the generating mouse event. 
</summary>
            <remarks> If the event is generated out side of the PDF page then its value will be set to -1.  </remarks>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfViewerMouseEventArgs.PageNumber">
            <summary>
Gets the page number of the PDF page during the generating mouse event. 
</summary>
            <remarks> Page number starts from 1. If the event is generated out side of the PDF page then its value will be set to -1.  </remarks>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfViewerMouseEventArgs.Y">
            <summary>
Gets the y-coordinate of the mouse during the generating mouse event. 
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfViewerMouseEventArgs.X">
            <summary>
Gets the x-coordinate of the mouse during the generating mouse event. 
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfViewerMouseEventArgs.Location">
            <summary>
Gets the location of the mouse during the generating mouse event. 
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfViewerMouseEventArgs.Clicks">
            <summary>
Gets the number of times the mouse button was pressed and released. 
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfViewerMouseEventArgs.Button">
            <summary>
Gets the Button object which contains the information about the mouse button associated with the event. 
</summary>
        </member>
        <member name="T:Foxit.PDF.Viewer.PdfViewerMouseEventArgs">
            <summary>
Provides data for the <see cref="!:PdfViewerMouseClick" /> and <see cref="!:PdfViewerMouseMove" /> event. 
</summary>
            <example> For example refer to <see cref="!:PdfViewerMouseClick" /> event. </example>
            <licensing>
This class is a Foxit PDF Viewer feature. The following license is required for non-evaluation usage:
<list type="bullet"><item>Foxit PDF Viewer for .NET SDK</item></list></licensing>
        </member>
        <member name="P:Foxit.PDF.Viewer.LinkClickedEventArgs.Cancel">
            <summary>
Gets or sets the value which will follow the link action. 
</summary>
            <remarks>  If cancel variable is set to true the control will not follow the link action. </remarks>
        </member>
        <member name="P:Foxit.PDF.Viewer.LinkClickedEventArgs.Action">
            <summary>
Gets the <see cref="P:Foxit.PDF.Viewer.LinkClickedEventArgs.Action" /> object which contains the information about the hyperlink. 
</summary>
        </member>
        <member name="T:Foxit.PDF.Viewer.LinkClickedEventArgs">
            <summary>
Provides data for the <see cref="!:LinkClicked" /> event. 
</summary>
            <example> For example refer to <see cref="!:LinkClicked" /> event. </example>
            <licensing>
This class is a Foxit PDF Viewer feature. The following license is required for non-evaluation usage:
<list type="bullet"><item>Foxit PDF Viewer for .NET SDK</item></list></licensing>
        </member>
        <member name="P:Foxit.PDF.Viewer.Action.ActionType">
            <summary>
Gets the action type of the link.
</summary>
        </member>
        <member name="T:Foxit.PDF.Viewer.Action">
            <summary>
Specifies the action information of the link.
</summary>
            <licensing>
This class is a Foxit PDF Viewer feature. The following license is required for non-evaluation usage:
<list type="bullet"><item>Foxit PDF Viewer for .NET SDK</item></list></licensing>
        </member>
        <member name="T:Foxit.PDF.Viewer.ActionType">
            <summary>
Specifies the action types of the links. 
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.ActionType.Launch">
            <summary>
Launch an application or open a file. 
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.ActionType.URI">
            <summary>
Universal Resource Identifier, including web pages and other Internet based resources. 
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.ActionType.RemoteGoTo">
            <summary>
Go to a destination within another document. 
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.ActionType.GoTo">
            <summary>
Go to a destination within current document. 
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.ActionType.UnSupported">
            <summary>
Unsupported action type. 
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.SearchDialogShowingEventArgs.MatchOption">
            <summary>
Gets or Sets the match option to use for searching.
</summary>
            <Remarks> If not set it will use the default matching option for search. </Remarks>
        </member>
        <member name="P:Foxit.PDF.Viewer.SearchDialogShowingEventArgs.Cancel">
            <summary>
Gets or sets a value which will cancel the search dialog. 
</summary>
            <Remarks> True value will hide the search dialog of the control. </Remarks>
        </member>
        <member name="T:Foxit.PDF.Viewer.SearchDialogShowingEventArgs">
            <summary>
Provides data for the <see cref="!:SearchDialogShowing" /> event. 
</summary>
            <example>For example refer to <see cref="!:SearchDialogShowing" /> event.</example>
            <licensing>
This class is a Foxit PDF Viewer feature. The following license is required for non-evaluation usage:
<list type="bullet"><item>Foxit PDF Viewer for .NET SDK</item></list></licensing>
        </member>
        <member name="P:Foxit.PDF.Viewer.ContextMenuShowingEventArgs.MenuContextType">
            <summary>
Gets the context type. 
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.ContextMenuShowingEventArgs.AssignedContextMenu">
            <summary>
Gets or sets the context menu of the control. 
</summary>
            <remarks> If assigned context menu is not set viewer will sets its own context menu for the control. </remarks>
        </member>
        <member name="P:Foxit.PDF.Viewer.ContextMenuShowingEventArgs.Cancel">
            <summary>
Gets or sets the boolean value that will hide the context menu. 
</summary>
            <remark> True value will hide the context menu and false will show the context menu. </remark>
        </member>
        <member name="T:Foxit.PDF.Viewer.ContextMenuShowingEventArgs">
            <summary>
Provides data for the <see cref="!:Foxit::PDF::Viewer::ContextMenuShowingEventHandler" /> event. 
</summary>
            <example> For example refer to <see cref="!:Foxit::PDF::Viewer::ContextMenuShowingEventHandler" /> event. </example>
            <licensing>
This class is a Foxit PDF Viewer feature. The following license is required for non-evaluation usage:
<list type="bullet"><item>Foxit PDF Viewer for .NET SDK</item></list></licensing>
        </member>
        <member name="T:Foxit.PDF.Viewer.ContextType">
            <summary>
Specifies the type of context. 
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.ContextType.TextSelected">
            <summary>
Indicates the context when the text is selected. 
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.ContextType.General">
            <summary>
Indicates the general context when there are no applicable conditions. 
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.CursorModeChangedEventArgs.CursorMode">
            <summary>
Gets the cursor mode. 
</summary>
        </member>
        <member name="T:Foxit.PDF.Viewer.CursorModeChangedEventArgs">
            <summary>
Provides data for the <see cref="!:CursorModeChanged" /> event. 
</summary>
            <example> For example refer to <see cref="!:CursorModeChanged" /> event. </example>
            <licensing>
This class is a Foxit PDF Viewer feature. The following license is required for non-evaluation usage:
<list type="bullet"><item>Foxit PDF Viewer for .NET SDK</item></list></licensing>
        </member>
        <member name="P:Foxit.PDF.Viewer.SearchedEventArgs.MatchOption">
            <summary>
Gets the match option used for search. 
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.SearchedEventArgs.SearchTerm">
            <summary>
Gets the search string. 
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.SearchedEventArgs.ShowSearchCompleteDialog">
            <summary>
Gets or sets a value indicating whether to show the search completed dialog or not. 
</summary>
            <remarks> False value will hide the search complete message dialog. </remarks>
        </member>
        <member name="P:Foxit.PDF.Viewer.SearchedEventArgs.SearchResultPosition">
            <summary>
Gets the position of Search Keyword. 
</summary>
            <remarks> This value do not have any relavance if the Status is 'Completed' or 'Canceled'.</remarks>
        </member>
        <member name="P:Foxit.PDF.Viewer.SearchedEventArgs.SearchResultPageNumber">
            <summary>
Gets the page number where the search is found.
</summary>
            <remarks> This value do not have any relavance if the Status is 'Completed' or 'Canceled'.</remarks>
        </member>
        <member name="P:Foxit.PDF.Viewer.SearchedEventArgs.Count">
            <summary>
Gets the count of successful search result. 
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.SearchedEventArgs.Status">
            <summary>
Gets a search status. 
</summary>
            <remarks> Status value will be 'Progressing' if search is not completed or cancelled by user. Status value will be 'Canceled' if user cancels it from 
the user interface or through code by invoking a new search. Status value will be 'Completed' when search finished. </remarks>
        </member>
        <member name="P:Foxit.PDF.Viewer.SearchedEventArgs.Completed">
            <summary>
Gets a boolean value which shows the search is completed or not. 
</summary>
            <remarks> True value indicates search is completed. False value indicates search is either progressing or canceled. </remarks>
        </member>
        <member name="T:Foxit.PDF.Viewer.SearchedEventArgs">
            <summary>
Provides  data for the <see cref="!:Searched" /> event. 
</summary>
            <remarks> This event is fired after every successful search. </remarks>
            <example> For example refer to <see cref="!:Searched" /> event. </example>
            <licensing>
This class is a Foxit PDF Viewer feature. The following license is required for non-evaluation usage:
<list type="bullet"><item>Foxit PDF Viewer for .NET SDK</item></list></licensing>
        </member>
        <member name="T:Foxit.PDF.Viewer.SearchStatus">
            <summary>
Specifies the Search status. 
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.SearchStatus.Canceled">
            <summary>
Search Canceled status. 
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.SearchStatus.Progressing">
            <summary>
Search Progressing status. 
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.SearchStatus.Completed">
            <summary>
Search Completed status. 
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.FileOpenFailedEventArgs.ShowFileOpenFailedDialog">
            <summary>
Gets or sets a value indicating whether the FileOpenFailedDialog is displayed in case of a file open failure. 
</summary>
            <remarks> False value will hide the file open failed message dialog. </remarks>
        </member>
        <member name="P:Foxit.PDF.Viewer.FileOpenFailedEventArgs.Exception">
            <summary>
Gets the exception related to the PDF file open failure.
</summary>
        </member>
        <member name="T:Foxit.PDF.Viewer.FileOpenFailedEventArgs">
            <summary>
Provides data for the <see cref="!:FileOpenFailed" /> event. 
</summary>
            <example>For example refer to <see cref="!:FileOpenFailed" /> event.</example>
            <licensing>
This class is a Foxit PDF Viewer feature. The following license is required for non-evaluation usage:
<list type="bullet"><item>Foxit PDF Viewer for .NET SDK</item></list></licensing>
        </member>
        <member name="P:Foxit.PDF.Viewer.DocumentDisplayedEventArgs.Document">
            <summary>
Gets the PdfDocument.
</summary>
            <Remarks>Gets the PDF document currently displayed.</Remarks>
        </member>
        <member name="T:Foxit.PDF.Viewer.DocumentDisplayedEventArgs">
            <summary>
Provides data for the <see cref="!:DocumentDisplayed" /> event. 
</summary>
            <example>For example refer to <see cref="!:DocumentDisplayed" /> event.</example>
            <licensing>
This class is a Foxit PDF Viewer feature. The following license is required for non-evaluation usage:
<list type="bullet"><item>Foxit PDF Viewer for .NET SDK</item></list></licensing>
        </member>
        <member name="P:Foxit.PDF.Viewer.FileOpenDialogShowingEventArgs.PdfDocument">
            <summary>
Gets or sets the PdfDocument.
</summary>
            <Remarks>Gets the PDF document currently displaying. If a new PdfDocument is assighned to this property, then PdfViewer will  
display the assighned document.</Remarks>
        </member>
        <member name="P:Foxit.PDF.Viewer.FileOpenDialogShowingEventArgs.InitialDirectory">
            <summary>
Gets or sets initial directory of the displaying file dialog.
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.FileOpenDialogShowingEventArgs.Cancel">
            <summary>
Gets or sets a value, which will decide whether to show FileOpenDialog or not. 
</summary>
            <Remarks>True value restricts showing FileOpenDialog while false will show FileOpenDialog.Default value is false.</Remarks>
        </member>
        <member name="T:Foxit.PDF.Viewer.FileOpenDialogShowingEventArgs">
            <summary>
Provides data for the <see cref="!:FileOpenDialogShowing" /> event. 
</summary>
            <example>For example refer to <see cref="!:FileOpenDialogShowing" /> event.</example>
            <licensing>
This class is a Foxit PDF Viewer feature. The following license is required for non-evaluation usage:
<list type="bullet"><item>Foxit PDF Viewer for .NET SDK</item></list></licensing>
        </member>
        <member name="P:Foxit.PDF.Viewer.PageVisibleArea.PixelRight">
            <summary>
Gets the right display end position of the page in pixels. 
</summary>
            <remarks />
        </member>
        <member name="P:Foxit.PDF.Viewer.PageVisibleArea.PixelBottom">
            <summary>
Gets the bottom display end position of the page in pixels. 
</summary>
            <remarks />
        </member>
        <member name="P:Foxit.PDF.Viewer.PageVisibleArea.PixelTop">
            <summary>
Gets the top display start position of the page in pixels.   
</summary>
            <remarks />
        </member>
        <member name="P:Foxit.PDF.Viewer.PageVisibleArea.PixelLeft">
            <summary>
Gets the left display start position of the page in pixels. 
</summary>
            <remarks />
        </member>
        <member name="P:Foxit.PDF.Viewer.PageVisibleArea.Bottom">
            <summary>
Gets the bottom value of the page. 
</summary>
            <remarks> This value ranges from from value of displayed proportion to '1' and is equal to the portion of the page lying inside the bottom edge of
the display.If the full page is inside the bottom edge then bottom value will be '0'. We can get the percentage of page on display vertically 
then calculation is <b>(Bottom - Top) * 100 </b>. </remarks>
        </member>
        <member name="P:Foxit.PDF.Viewer.PageVisibleArea.Right">
            <summary>
Gets the right value of the page. 
</summary>
            <remarks> This value ranges from '0' to '1' and is equal to the portion of the page lying inside the Right edge of
the display.If the full page is inside the right edge then right value will be '1'. We can get the percentage of page
on display then calculation is <b>(Right - Left) * 100 </b>. </remarks>
        </member>
        <member name="P:Foxit.PDF.Viewer.PageVisibleArea.Top">
            <summary>
Gets the top value of the page. 
</summary>
            <remarks> This value ranges from value of displayed proportion to '1' and is equal to the portion of the page lying outside the top edge of
the display.If the page is inside the display then top value will be '0'. We can get the percentage of page on display vertically
then calculation is <b>(Bottom - Top) * 100 </b>. </remarks>
        </member>
        <member name="P:Foxit.PDF.Viewer.PageVisibleArea.Left">
            <summary>
Gets the left value of the page. 
</summary>
            <remarks> This value ranges from '0' to '1' and is equal to the portion of the page lying outside the left edge of
the display.If the page is inside the display then left value will be '0'. We can get 
the percentage of page on display horizontally then calculation is <b>(Right - Left) * 100 </b>. </remarks>
        </member>
        <member name="P:Foxit.PDF.Viewer.PageVisibleArea.PageNumber">
            <summary>
Gets the page number. 
</summary>
        </member>
        <member name="T:Foxit.PDF.Viewer.PageVisibleArea">
            <summary>
Provides the details of visible area of a page. 
</summary>
            <example>The following example will show how we can get the array of PageVisibleArea for a view.<p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports Foxit.PDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
    Private Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs) Handles MyBase.Load
        ' Load and Open the document in Viewer.
        Dim MyDocument As New PdfDocument("C:\MyDocument.pdf")
        MyPdfViewer.Open(MyDocument)

        'Get a view to calculate visible page area
        Dim MyCurrentView As Foxit.PDF.Viewer.View = MyPdfViewer.GetCurrentView()

        'Get the array of pages with their visible area
        Dim MyVisibleAreaArray As PageVisibleArea() = MyPdfViewer.GetPageVisibleArea(MyCurrentView)

        'Get the details of visible page area
        Dim pageNumber As Integer = MyVisibleAreaArray(0).PageNumber
        Dim left As Single = MyVisibleAreaArray(0).Left
        Dim top As Single = MyVisibleAreaArray(0).Top
        Dim right As Single = MyVisibleAreaArray(0).Right
        Dim bottom As Single = MyVisibleAreaArray(0).Bottom

    End Sub

End Class						
</code><code lang="C#">
using System;
using System.Windows.Forms;
using Foxit.PDF.Viewer;

namespace PDFViewerDemo
{
    public class Form1 : Form
    {
        private Foxit.PDF.Viewer.PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
            this.Load += new EventHandler(Form1_Load);
        }

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            // Load and Open the document in Viewer.
            PdfDocument document = new PdfDocument(@"C:\MyDocument.pdf");
            pdfViewer.Open(document);

            // Get a view to calculate visible page area
            Foxit.PDF.Viewer.View currentView = pdfViewer.GetCurrentView();

            // Get the array of pages with their visible area
            PageVisibleArea[] visibleAreaArray = pdfViewer.GetPageVisibleArea(currentView);

            // Get the details of visible page area
            int pageNumber = visibleAreaArray[0].PageNumber;
            float left = visibleAreaArray[0].Left;
            float top = visibleAreaArray[0].Top;
            float right = visibleAreaArray[0].Right;
            float bottom = visibleAreaArray[0].Bottom;
        }
    }
}
</code></example>
            <licensing>
This class is a Foxit PDF Viewer feature. The following license is required for non-evaluation usage:
<list type="bullet"><item>Foxit PDF Viewer for .NET SDK</item></list></licensing>
        </member>
        <member name="P:Foxit.PDF.Viewer.TextSelectedEventArgs.SelectedText">
            <summary>
Gets selected text.
</summary>
        </member>
        <member name="T:Foxit.PDF.Viewer.TextSelectedEventArgs">
            <summary>
Provides data for the <see cref="!:TextSelected" /> event. 
</summary>
            <example>For example refer to <see cref="!:TextSelected" /> event.</example>
            <licensing>
This class is a Foxit PDF Viewer feature. The following license is required for non-evaluation usage:
<list type="bullet"><item>Foxit PDF Viewer for .NET SDK</item></list></licensing>
        </member>
        <member name="P:Foxit.PDF.Viewer.TextSelectingEventArgs.Cancel">
            <summary>
Gets or sets a  value whether to cancel the TextSelecting. 
</summary>
            <Remarks>True will cancel the text selection.</Remarks>
        </member>
        <member name="T:Foxit.PDF.Viewer.TextSelectingEventArgs">
            <summary>
Provides data for the <see cref="!:TextSelecting" /> event. 
</summary>
            <example>For example refer to <see cref="!:TextSelecting" /> event.</example>
            <licensing>
This class is a Foxit PDF Viewer feature. The following license is required for non-evaluation usage:
<list type="bullet"><item>Foxit PDF Viewer for .NET SDK</item></list></licensing>
        </member>
        <member name="P:Foxit.PDF.Viewer.SearchProgressingEventArgs.CurrentPageNumber">
            <summary>
Gets the page number where the search is happening. 
</summary>
            <remarks> It is a non zero based index. </remarks>
        </member>
        <member name="P:Foxit.PDF.Viewer.SearchProgressingEventArgs.Cancel">
            <summary>
Gets or sets the value whether to cancel the search or not. 
</summary>
            <remarks> True value will abort the search process. </remarks>
        </member>
        <member name="P:Foxit.PDF.Viewer.SearchProgressingEventArgs.MatchOption">
            <summary>
Gets the match option used for search. 
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.SearchProgressingEventArgs.SearchTerm">
            <summary>
Gets the search string. 
</summary>
        </member>
        <member name="T:Foxit.PDF.Viewer.SearchProgressingEventArgs">
            <summary>
Provides data for the <see cref="!:SearchProgressing" /> event. 
</summary>
            <example> For example refer to <see cref="!:SearchProgressing" /> event. </example>
            <licensing>
This class is a Foxit PDF Viewer feature. The following license is required for non-evaluation usage:
<list type="bullet"><item>Foxit PDF Viewer for .NET SDK</item></list></licensing>
        </member>
        <member name="P:Foxit.PDF.Viewer.PasswordRequiredEventArgs.MaxAttempts">
            <summary>
Gets or sets the maximum number of attempts to re-entry, when incorrect password is given.
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.PasswordRequiredEventArgs.Cancel">
            <summary>
Gets or sets a value indicating whether the Password dialog box displayed or not. 
</summary>
            <Remarks>True will cancel the PDF file open and <see cref="!:FileOpenFailed" /> event will be raised.</Remarks>
        </member>
        <member name="P:Foxit.PDF.Viewer.PasswordRequiredEventArgs.Password">
            <summary>
Gets or sets the PDF document password.
</summary>
        </member>
        <member name="T:Foxit.PDF.Viewer.PasswordRequiredEventArgs">
            <summary>
Provides data for the <see cref="!:PasswordRequired" /> event.
</summary>
            <example>For example refer to <see cref="!:PasswordRequired" /> event.</example>
            <licensing>
This class is a Foxit PDF Viewer feature. The following license is required for non-evaluation usage:
<list type="bullet"><item>Foxit PDF Viewer for .NET SDK</item></list></licensing>
        </member>
        <member name="P:Foxit.PDF.Viewer.FileOpenedEventArgs.PdfDocument">
            <summary>
Gets the PDF document.
</summary>
            <Remarks>Gets the PDF document currently displaying.</Remarks>
        </member>
        <member name="T:Foxit.PDF.Viewer.FileOpenedEventArgs">
            <summary>
Provides data for the <see cref="!:FileOpened" /> event. 
</summary>
            <example>For example refer to <see cref="!:FileOpened" /> event.</example>
            <licensing>
This class is a Foxit PDF Viewer feature. The following license is required for non-evaluation usage:
<list type="bullet"><item>Foxit PDF Viewer for .NET SDK</item></list></licensing>
        </member>
        <member name="P:Foxit.PDF.Viewer.FileOpeningEventArgs.PdfDocument">
            <summary>
Gets or sets the PDF document.
</summary>
            <Remarks>Gets the PDF document currently displaying. If a new PdfDocument is assigned to this property, then PdfViewer will  
display the assigned document.</Remarks>
        </member>
        <member name="P:Foxit.PDF.Viewer.FileOpeningEventArgs.FilePath">
            <summary>
Gets or sets the PDF document file path.
</summary>
            <Remarks>Gets file path of the currently displayed PDF document. On changing the file path, new document will be displayed in PdfViewer.</Remarks>
        </member>
        <member name="P:Foxit.PDF.Viewer.FileOpeningEventArgs.Cancel">
            <summary>
Gets or sets a value for Opening the pdf File.
</summary>
            <Remarks>True will cancel the PDF file open and <see cref="!:FileOpenFailed" /> event will be raised.</Remarks>
        </member>
        <member name="T:Foxit.PDF.Viewer.FileOpeningEventArgs">
            <summary>
Provides data for the <see cref="!:FileOpening" /> event. 
</summary>
            <example>For example refer to <see cref="!:FileOpening" /> event.</example>
            <licensing>
This class is a Foxit PDF Viewer feature. The following license is required for non-evaluation usage:
<list type="bullet"><item>Foxit PDF Viewer for .NET SDK</item></list></licensing>
        </member>
        <member name="F:Foxit.PDF.Viewer.PrintDialogue.printDocument">
            <summary>
Required method for Designer support - do not modify
the contents of this method with the code editor.
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.PrintDialogue.components">
            <summary>
Required designer variable.
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.PagePrintingEventArgs.CancelPrintingPage">
            <summary>
Gets or sets a boolean. Setting to true will cancel printing the current page.
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.PagePrintingEventArgs.PageNumber">
            <summary>
Gets the page number which is going to be printed.
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.PagePrintingEventArgs.Document">
            <summary>
Gets the PdfDocument.
</summary>
            <Remarks>Gets the PDF document currently displayed.</Remarks>
        </member>
        <member name="T:Foxit.PDF.Viewer.PagePrintingEventArgs">
            <summary>
Provides data for the <see cref="!:PagePrinting" /> event. 
</summary>
            <licensing>
This class is a Foxit PDF Viewer feature. The following license is required for non-evaluation usage:
<list type="bullet"><item>Foxit PDF Viewer for .NET SDK</item></list></licensing>
        </member>
        <member name="P:Foxit.PDF.Viewer.DocumentPrintedEventArgs.Document">
            <summary>
Gets the PdfDocument.
</summary>
            <Remarks>Gets the PDF document currently displayed.</Remarks>
        </member>
        <member name="T:Foxit.PDF.Viewer.DocumentPrintedEventArgs">
            <summary>
Provides data for the <see cref="!:DocumentPrinted" /> event. 
</summary>
            <licensing>
This class is a Foxit PDF Viewer feature. The following license is required for non-evaluation usage:
<list type="bullet"><item>Foxit PDF Viewer for .NET SDK</item></list></licensing>
        </member>
        <member name="T:Foxit.PDF.Viewer.MatchOptions">
            <summary>
Specifies the match options for the search. 
</summary>
            <licensing>
This class is a Foxit PDF Viewer feature. The following license is required for non-evaluation usage:
<list type="bullet"><item>Foxit PDF Viewer for .NET SDK</item></list></licensing>
        </member>
        <member name="F:Foxit.PDF.Viewer.MatchOptions.All">
            <summary>
Searches the term both by matching the case and whole word. 
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.MatchOptions.WholeWordOnly">
            <summary>
Searches the term by matching only the whole word. 
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.MatchOptions.CaseSensitive">
            <summary>
Search the term by matching the character case. 
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.MatchOptions.None">
            <summary>
Searches the term with no option. 
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.ViewChangedEventArgs.AddViewToHistory">
            <summary>
Gets or set the boolean to store view to history or not. 
</summary>
            <remarks>
By default the AddViewToHistory is true and causes the PreviousView property to get updated whenever navigating to a new view.
Navigation between views already present in the view history will set this property to false to avoid updating the history. 
To prevent a view from getting stored in view history AddViewToHistory can be set to false within the ViewChangedEvent.  
</remarks>
        </member>
        <member name="P:Foxit.PDF.Viewer.ViewChangedEventArgs.CurrentView">
            <summary>
Gets the current view. 
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.ViewChangedEventArgs.PreviousView">
            <summary>
Gets the previous view. 
</summary>
        </member>
        <member name="T:Foxit.PDF.Viewer.ViewChangedEventArgs">
            <summary>
Provides data for the <see cref="!:ViewChanged" /> event. 
</summary>
            <example> For example refer to <see cref="!:ViewChanged" /> event. </example>
            <licensing>
This class is a Foxit PDF Viewer feature. The following license is required for non-evaluation usage:
<list type="bullet"><item>Foxit PDF Viewer for .NET SDK</item></list></licensing>
        </member>
        <member name="P:Foxit.PDF.Viewer.View.MaxScrollY">
            <summary>
Gets the maximum verical scroll value possible based on current view.
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.View.MaxScrollX">
            <summary>
Gets the maximum horizontal scroll value possible based on current view.
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.View.CurrentScrollYPosition">
            <summary>
Gets the current vertical scroll position of the page.
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.View.CurrentScrollXPosition">
            <summary>
Gets the current horizontal scroll position of the page. 
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.View.CurrentScrollYPostion">
            <summary>
                <span style="color:red">Obsolete.</span>
Gets the current vertical scroll position of the page.
</summary>
            <remarks>
                <span style="color:red">NOTE: This property is obsolete.</span> Use  <see cref="P:Foxit.PDF.Viewer.View.CurrentScrollYPosition" /> property instead.
</remarks>
        </member>
        <member name="P:Foxit.PDF.Viewer.View.CurrentScrollXPostion">
            <summary>
                <span style="color:red">Obsolete.</span>
Gets the current horizontal scroll position of the page. 
</summary>
            <remarks>
                <span style="color:red">NOTE: This property is obsolete.</span> Use  <see cref="P:Foxit.PDF.Viewer.View.CurrentScrollXPosition" /> property instead.
</remarks>
        </member>
        <member name="P:Foxit.PDF.Viewer.View.PageOrientation">
            <summary>
Gets the page orientation of the view. 
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.View.ZoomMode">
            <summary>
Gets the zoom mode of the view. 
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.View.PageDisplayMode">
            <summary>
Gets the page display mode of the view. 
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.View.ZoomPercent">
            <summary>
Gets the zoom percent of the view. 
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.View.CurrentPageNumber">
            <summary>
Gets the current page number of the view. 
</summary>
            <remarks> It is a non zero based index. </remarks>
        </member>
        <member name="P:Foxit.PDF.Viewer.View.StartPageNumber">
            <summary>
Gets the start page number of the view. 
</summary>
            <remarks> It is a non zero based index. </remarks>
        </member>
        <member name="M:Foxit.PDF.Viewer.View.Equals(System.Object)">
            <summary>
Determines whether the specified <b>View</b> object is equal to the current <b>View</b> object. 
</summary>
            <param name="obj">
                <b>View</b> object to compare with current <b>View</b> object.</param>
            <remarks> true if the specified <b>View</b>&gt; object is equal to the current <b>View</b> object otherwise, false. </remarks>
        </member>
        <member name="T:Foxit.PDF.Viewer.View">
            <summary>
Represents the view containing the attributes which defines the display. 
</summary>
            <example>The following example will show how to get a view and its associated data. <p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports Foxit.PDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub	

    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
        AddHandler Me.Load, New EventHandler(AddressOf Form1_Load)
    End Sub

    Private Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs)
        ' Open document in viewer.
        MyPdfViewer.Open("C:\MyDocument.pdf")

        ' Get current view on display
        Dim MyCurrentView As Foxit.PDF.Viewer.View = MyPdfViewer.GetCurrentView()

        ' Get Initial view of the document
        Dim MyInitialView As Foxit.PDF.Viewer.View = MyPdfViewer.GetInitialView()
        
        ' Get the details from a view
        Dim pageNumber As Integer = MyCurrentView.StartPageNumber
        Dim zoomValue As Single = MyCurrentView.ZoomPercent
        Dim MyDisplayMode As PageDisplayMode = MyCurrentView.PageDisplayMode
        Dim MyZoomMode As Zoom = MyCurrentView.ZoomMode
        Dim pageOrientation As Foxit.PDF.Viewer.Orientation = MyCurrentView.PageOrientation
    End Sub
        
End Class
</code><code lang="C#">
using System;
using System.Windows.Forms;
using Foxit.PDF.Viewer;

namespace PDFViewerDemo
{
    public class Form1 : Form
    {
        private Foxit.PDF.Viewer.PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }						                				
														
        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
            this.Load+=new EventHandler(Form1_Load);
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            // Open document in viewer.
            pdfViewer.Open(@"C:\MyDocument.pdf");
        
            // Get current view on display
            Foxit.PDF.Viewer.View currentView = pdfViewer.GetCurrentView();

            // Get Initial view of the document
            Foxit.PDF.Viewer.View initialView = pdfViewer.GetInitialView();
            
            // Get the details from a view
            int pageNumber = currentView.StartPageNumber;
            float zoomValue = currentView.ZoomPercent;
            PageDisplayMode displayMode = currentView.PageDisplayMode;
            Zoom zoomMode = currentView.ZoomMode;
            Foxit.PDF.Viewer.Orientation pageOrientation = currentView.PageOrientation;
        }
    }
}
</code></example>
            <licensing>
This class is a Foxit PDF Viewer feature. The following license is required for non-evaluation usage:
<list type="bullet"><item>Foxit PDF Viewer for .NET SDK</item></list></licensing>
        </member>
        <member name="M:FPDFText_PageToText(System.Void*,System.Int32,System.Char*,System.Int32,System.Int32)">
 Convert a PDF page data to a text buffer.
 @param[in] doc			- 	Handle to document. Returned by FPDF_LoadDocument function.
 @param[in] page_index		- 	Index number of the page. 0 for the first page.
 @param[in] buf			- 	An output buffer used to hold the text of the page.
 @param[in] size			- 	Size of the buffer.
 @param[in] flag			- 	0 for stream order, 1 for appearance order.
 @retval	If buf is NULL or size is zero, number of characters (not bytes) needed,
			otherwise, number of characters copied into the buf.

</member>
        <member name="M:FPDFText_PDFToText(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 @name Flags used by FPDFText_PDFToText and FPDFText_PageToText.
@{

@brief STREAM 
@brief DISPLAY 
@}
 Convert a PDF file to a TXT File.
 @param[in] sour_file	- 	Path to the PDF file you want to Convert.
 @param[in] dest_file	- 	The path of the file you want to save.
 @param[in] flag		- 	0 for stream order, 1 for appearance order.
 @param[in] password	-	A string used as the password for PDF file. 
							If no password needed, empty or NULL can be used.
 @retval	TURE for succeed, False for failed. 

</member>
        <member name="M:FPDFLink_CloseWebLinks(System.Void*)">
Release resources used by weblink feature.
@param[in] link_page	-	Handle returned by FPDFLink_LoadWebLinks.
@retval	None.

</member>
        <member name="M:FPDFLink_GetRect(System.Void*,System.Int32,System.Int32,System.Double*,System.Double*,System.Double*,System.Double*)">
Fetch the boundaries of a rectangle for a link.
@param[in] link_page	-	Handle returned by FPDFLink_LoadWebLinks.
@param[in] link_index	-	Zero-based index for the link.
@param[in] rect_index	-	Zero-based index for a rectangle.
@param[in] left		-	Pointer to a double receiving the rectangle left boundary.
@param[in] top		-	Pointer to a double receiving the rectangle top boundary.
@param[in] right		-	Pointer to a double receiving the rectangle right boundary.
@param[in] bottom		-	Pointer to a double receiving the rectangle bottom boundary.
@retval	None.

</member>
        <member name="M:FPDFLink_CountRects(System.Void*,System.Int32)">
Count number of rectangular areas for the link.
@param[in] link_page	-	Handle returned by FPDFLink_LoadWebLinks.
@param[in] link_index	-	Zero-based index for the link.
@retval	Number of rectangular areas for the link.

</member>
        <member name="M:FPDFLink_GetURL(System.Void*,System.Int32,System.UInt16*,System.Int32)">
 Fetch the URL information for a detected web link.
 @param[in] link_page	-	Handle returned by FPDFLink_LoadWebLinks.
 @param[in] link_index	-	Zero-based index for the link.
 @param[in] buffer		-	A unicode buffer.
 @param[in] buflen		-	Number of characters (not bytes) for the buffer, excluding an additional terminator.
 @retval	If buffer is NULL or buflen is zero, return number of characters (not bytes) needed,
			otherwise, return number of characters copied into the buffer.

</member>
        <member name="M:FPDFLink_CountWebLinks(System.Void*)">
Count number of detected web links.
@param[in] link_page	-	Handle returned by FPDFLink_LoadWebLinks.
@retval	Number of detected web links.

</member>
        <member name="M:FPDFLink_LoadWebLinks(System.Void*)">
 Prepare information about weblinks in a page.
 @param[in] text_page	-	Handle to a text page information structure. Returned by FPDFText_LoadPage function.
 @note		Weblinks are those links implicitly embedded in PDF pages. PDF also has a type of
			annotation called "link", FPDFTEXT doesn't deal with that kind of link.
			FPDFTEXT weblink feature is useful for automatically detecting links in the page
			contents. For example, things like "http://www.foxitsoftware.com" will be detected,
			so applications can allow user to click on those characters to activate the link,
			even the PDF doesn't come with link annotations.

			FPDFLink_CloseWebLinks must be called to release resources.
 @retval 	A handle to the page's links information structure.
			NULL if something goes wrong.

</member>
        <member name="M:FPDFText_FindClose(System.Void*)">
 Release a search context.
 @param[in] handle		-	A search context handle returned by FPDFText_FindStart.
 @retval	None.


</member>
        <member name="M:FPDFText_GetSchCount(System.Void*)">
 Get the number of matched characters in the search result.
 @param[in] handle		-	A search context handle returned by FPDFText_FindStart.
 @retval	Number of matched characters.


</member>
        <member name="M:FPDFText_GetSchResultIndex(System.Void*)">
 Get the starting character index of the search result.
 @param[in] handle		-	A search context handle returned by FPDFText_FindStart.
 @retval	Index for the starting character.


</member>
        <member name="M:FPDFText_FindPrev(System.Void*)">
 Search in the direction from page end to start.
 @param[in] handle		-	A search context handle returned by FPDFText_FindStart.
 @retval	Whether a match is found.


</member>
        <member name="M:FPDFText_FindNext(System.Void*)">
 Search in the direction from page start to end.
 @param[in] handle		-	A search context handle returned by FPDFText_FindStart.
 @retval	Whether a match is found.


</member>
        <member name="M:FPDFText_FindStart(System.Void*,System.UInt16!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Int32)">
 @name Flags used by FPDFText_FindStart function.
@{

@brief If not set, it will not match case by default. 
@brief If not set, it will not match the whole word by default. 
@}
 Start a search.
 @param[in] text_page		-	Handle to a text page information structure. Returned by FPDFText_LoadPage function.
 @param[in] findwhat		-	A unicode match pattern.
 @param[in] flags			-	Option flags.
 @param[in] start_index	-	Start from this character. -1 for end of the page.
 @retval	A handle for the search context. FPDFText_FindClose must be called to release this handle.


</member>
        <member name="M:FPDFText_GetBoundedSegment(System.Void*,System.Int32,System.Int32*,System.Int32*)">
 Get a particular segment in the result generated by FPDFText_CountBoundedSegments function.
 @param[in] text_page		-	Handle to a text page information structure. Returned by FPDFText_LoadPage function.
 @param[in] seg_index		-	Zero-based index for the segment.
 @param[in] start_index	-	Pointer to an integer receiving the start character index for the segment.
 @param[in] count			-	Pointer to an integer receiving number of characters in the segment.
 @retval	None.


</member>
        <member name="M:FPDFText_CountBoundedSegments(System.Void*,System.Double,System.Double,System.Double,System.Double)">
 Get number of text segments within a rectangular boundary on the page.
 @param[in] text_page	-	Handle to a text page information structure. Returned by FPDFText_LoadPage function.
 @param[in] left		-	Left boundary.
 @param[in] top		-	Top boundary.
 @param[in] right		-	Right boundary.
 @param[in] bottom		-	Bottom boundary.
 @retval	Number of segments.


</member>
        <member name="M:FPDFText_GetBoundedText(System.Void*,System.Double,System.Double,System.Double,System.Double,System.UInt16*,System.Int32)">
 Extract unicode text within a rectangular boundary on the page.
 @param[in] text_page	-	Handle to a text page information structure. Returned by FPDFText_LoadPage function.
 @param[in] left		-	Left boundary.
 @param[in] top		-	Top boundary.
 @param[in] right		-	Right boundary.
 @param[in] bottom		-	Bottom boundary.
 @param[in] buffer		-	A unicode buffer.
 @param[in] buflen		-	Number of characters (not bytes) for the buffer, excluding an additional terminator.
 @retval	If buffer is NULL or buflen is zero, return number of characters (not bytes) needed,
			otherwise, return number of characters copied into the buffer.


</member>
        <member name="M:FPDFText_GetRect(System.Void*,System.Int32,System.Double*,System.Double*,System.Double*,System.Double*)">
 Get a rectangular area from the result generated by FPDFText_CountRects.
 @param[in] text_page	-	Handle to a text page information structure. Returned by FPDFText_LoadPage function.
 @param[in] rect_index	-	Zero-based index for the rectangle.
 @param[in] left		-	Pointer to a double receiving the rectangle left boundary.
 @param[in] top		-	Pointer to a double receiving the rectangle top boundary.
 @param[in] right		-	Pointer to a double receiving the rectangle right boundary.
 @param[in] bottom		-	Pointer to a double receiving the rectangle bottom boundary.
 @retval	None.


</member>
        <member name="M:FPDFText_CountRects(System.Void*,System.Int32,System.Int32)">
 Count number of rectangular areas occupied by a segment of texts.
 @param[in] text_page		-	Handle to a text page information structure. Returned by FPDFText_LoadPage function.
 @param[in] start_index	-	Index for the start characters.
 @param[in] count			-	Number of characters.
 @note		This function, along with FPDFText_GetRect can be used by applications to detect the position
			on the page for a text segment, so proper areas can be highlighted or something.
			FPDFTEXT will automatically merge small character boxes into bigger one if those characters
			are on the same line and use same font settings.
 @retval	Number of rectangles. Zero for error.

</member>
        <member name="M:FPDFText_GetText(System.Void*,System.Int32,System.Int32,System.UInt16*)">
 Extract unicode text string from the page.
 @param[in] text_page		-	Handle to a text page information structure. Returned by FPDFText_LoadPage function.
 @param[in] start_index	-	Index for the start character.
 @param[in] count			-	Number of characters to be extracted. -1 means to extract text from "start_index" to the end of the page.
 @param[in] result			-	A buffer (allocated by application) receiving the extracted unicode text string.
								If this is NULL, that means current call of this function is only to get the actual number of characters (as the return value).
								If this is not NULL, please ensure the size of this buffer is able to hold, at least, actual number of characters (excluding trailing terminator).
 @note		1. This function ignores characters without unicode information.
			2. In order to extract text correctly, this function is suggested to be called twice as following steps:
				a. For the first call, send NULL to parameter "result", and the return value would be the actual size (excluding trailing terminator) of text.
				b. Then, application should allocate a buffer based on the actual size.
				c. For the second call, send the allocated buffer to parameter "result".
 @retval	The actual number of characters of the extracted text, excluding trailing terminator.

</member>
        <member name="M:FPDFText_GetCharIndexByDirection(System.Void*,System.Int32,System.Int32)">
 @name Flags used by FPDFText_GetCharIndexByDirection function.
@{

@brief LEFT 
@brief RIGHT 
@brief UP 
@brief DOWN 
@}
 Move the character index in different directions and get new character index, from a specific character.
 @param[in] text_page	-	Handle to a text page information structure. Returned by FPDFText_LoadPage function.
 @param[in] index		-	Zero-based index for the current character.
 @param[in] direction	-	A number indicating the moving direction. Can be one of the followings:
							FPDFTEXT_LEFT, FPDFTEXT_UP, FPDFTEXT_RIGHT, FPDFTEXT_DOWN.
 @note		FPDFTEXT moves the character pointer according to "stream order". For example, left will 
			move to the previous character, right will move to next character. Because in PDF, "stream
			order" can be different from "appearance order" (the order that appears to human eyes),
			so it's possible the moving direction doesn't match the actually position movement. 
		
 @retval	Zero-base character index for the new position.
			-1 if beginning of the page reached; 
			-2 if end of the page reached;
			-3 for failures.

</member>
        <member name="M:FPDFText_GetCharIndexAtPos(System.Void*,System.Double,System.Double,System.Double,System.Double)">
 Get the index of a character at or nearby a certain position on the page.
 @param[in] text_page	-	Handle to a text page information structure. Returned by FPDFText_LoadPage function.
 @param[in] x			-	X position in PDF "user space".
 @param[in] y			-	Y position in PDF "user space".
 @param[in] xTolerance	-	A x-axis tolerance value for character hit detection, in point unit.
 @param[in] yTolerance	-	A y-axis tolerance value for character hit detection, in point unit.
 @retval	The zero-based index of the character at, or nearby the point (x,y).
			If there is no character at or nearby the point, return value will be -1.
			If an error occurs, return value will be -3.


</member>
        <member name="M:FPDFFont_GetName(System.Void*)">
 Get the Name of a font.
 @param[in] font		-	Handle to a font. Returned by FPDFText_GetFont function.
 @retval	A pointer to a null-terminated string that specifies the name of the font.
			Application can't modify the returned string.


</member>
        <member name="M:FPDFFont_GetDescent(System.Void*)">
 Get font descent (in 1/1000 em).
 @param[in] font		-	Handle to a font. Returned by FPDFText_GetFont function.
 @retval	The descent (typically the under-baseline height of letter "g"), measured in
			1/1000 of em size. Most fonts have a negative descent value. 


</member>
        <member name="M:FPDFFont_GetAscent(System.Void*)">
 Get font ascent(in 1/1000 em).
 @param[in] font		-	Handle to a font. Returned by FPDFText_GetFont function.
 @retval	The ascent (typically the above-baseline height of letter "h"), measured in
			1/1000 of em size. So if a character uses a font size (em size) of 10 points,
			and it has an ascent value of 500 (meaning half of the em), then the ascent
			height will be 5 points (5/72 inch).


</member>
        <member name="M:FPDFText_GetFont(System.Void*,System.Int32)">
 Get font of a particular character.
 @param[in] text_page	-	Handle to a text page information structure. Returned by FPDFText_LoadPage function.
 @param[in] index		-	Zero-based index of the character.
 @retval	A handle to the font used by the particular character.
			This handle can be used in FPDFFont_xxx functions for more information about the font.


</member>
        <member name="M:FPDFText_GetMatrix(System.Void*,System.Int32,System.Double*,System.Double*,System.Double*,System.Double*)">
 Get the matrix of a particular character.
 @param[in] text_page	-	Handle to a text page information structure. Returned by FPDFText_LoadPage function.
 @param[in] index		-	Zero-based index of the character.
 @param[in] a			-	Pointer to a double receiving the coefficient "a" of the matrix.
 @param[in] b			-	Pointer to a double receiving the coefficient "b" of the matrix.
 @param[in] c			-	Pointer to a double receiving the coefficient "c" of the matrix.
 @param[in] d			-	Pointer to a double receiving the coefficient "d" of the matrix.
 @note		A matrix defines coodrinate transformation from one coordinate space to another.
			In PDF, a matrix is defined by the following equations:
			x' = a * x + c * y + e;
			y' = b * x + d * y + f;
			FPDFText_GetMatrix function is used to get a,b,c,d coefficients of the transformation from
			"text space" to "user space". The e,f coefficients are actually the origin position, which
			can be fetched by FPDFText_GetOrigin function.
 @retval	None.

</member>
        <member name="M:FPDFText_GetCharBox(System.Void*,System.Int32,System.Double*,System.Double*,System.Double*,System.Double*)">
Get bounding box of a particular character.
@param[in] text_page	-	Handle to a text page information structure. Returned by FPDFText_LoadPage function.
@param[in] index		-	Zero-based index of the character.
@param[in] left		-	Pointer to a double receiving left position of the character box.
@param[in] right		-	Pointer to a double receiving right position of the character box.
@param[in] bottom		-	Pointer to a double receiving bottom position of the character box.
@param[in] top		-	Pointer to a double receiving top position of the character box.
@note		All positions are measured in PDF "user space".
@retval	None.

</member>
        <member name="M:FPDFText_GetOrigin(System.Void*,System.Int32,System.Double*,System.Double*)">
Get origin position of a particular character.
@param[in] text_page	-	Handle to a text page information structure. Returned by FPDFText_LoadPage function.
@param[in] index		-	Zero-based index of the character.
@param[in] x			-	Pointer to a double receiving X position of the character origin.
@param[in] y			-	Pointer to a double number receiving Y position of the character origin.
@note		Origin X/Y positions are measured in PDF "user space".
@retval	None.

</member>
        <member name="M:FPDFText_GetFontSize(System.Void*,System.Int32)">
 Get the font size of a particular character.
 @param[in] text_page	-	Handle to a text page information structure. Returned by FPDFText_LoadPage function.
 @param[in] index		-	Zero-based index of the character.
 @retval	The font size of the particular character, measured in points (about 1/72 inch).
			This is the typographic size of the font (so called "em size").


</member>
        <member name="M:FPDFText_IsGenerated(System.Void*,System.Int32)">
 Indicate whether a character is a generated character.
 @param[in] text_page	-	Handle to a text page information structure. Returned by FPDFText_LoadPage function.
 @param[in] index		-	Zero-based index of the character.
 @note		"Generated character" is a character generated by FPDFTEXT engine to keep formatting information. It
			is not actually encoded in the PDF page. This happens in two cases: 1) an
			extra space character will be generated if two characters in the same line appears to
			be apart by quite some space, 2) a new line character will be generated if two consecutive
			characters appears to be on different line. These characters are useful when doing the
			search.
 @retval	TRUE indicates a generated character and FALSE indicates an actual character in the PDF page.

</member>
        <member name="M:FPDFText_GetUnicode(System.Void*,System.Int32)">
 Get Unicode of a character in a page.
 @param[in] text_page	-	Handle to a text page information structure. Returned by FPDFText_LoadPage function.
 @param[in] index		-	Zero-based index of the character.
 @retval	The Unicode of the character.
			If a character is not encoded in Unicode and cannot be convert to Unicode by the Foxit engine,
			the return value will be zero.


</member>
        <member name="M:FPDFText_CountChars(System.Void*)">
 Get number of characters in a page.
 @param[in] text_page	-	Handle to a text page information structure. Returned by FPDFText_LoadPage function.
 @note		Characters in a page form a "stream". Inside the stream, each character has an index.
			These index parameters are used in FPDFText_xxx functions. The first character in the page
			has an index value of zero. Generated characters, like additional space characters, new line
			characters, are also counted.
 @retval	Number of characters in the page. Return -1 for error. 


</member>
        <member name="M:FPDFText_ClosePage(System.Void*)">
Release all resources allocated for a text page information structure.
@param[in] text_page	-	Handle to a text page information structure. Returned by FPDFText_LoadPage function.
@retval	None.

</member>
        <member name="T:Foxit.PDF.Viewer.CursorMode">
            <summary>
Specifies the cursor modes. 
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.CursorMode.None">
            <summary>
Cursor mode for suppressing any UI action on a mourse click or drag.
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.CursorMode.MarqueeZoomMode">
            <summary>
Cursor mode for Marquee Zoom. 
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.CursorMode.PanningMode">
            <summary>
Cursor mode for panning. 
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.CursorMode.TextSelectionMode">
            <summary>
Cursor mode for text selection. 
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.DocumentDisplayingEventArgs.FocusDocument">
            <summary>
Gets or sets the value of <see cref="P:Foxit.PDF.Viewer.DocumentDisplayingEventArgs.FocusDocument" /> property which decides focus should be given to this control or not after loading the document.
</summary>
            <remarks> Default value is true. </remarks>
        </member>
        <member name="P:Foxit.PDF.Viewer.DocumentDisplayingEventArgs.InitialVisibleNavigationPane">
            <summary>
Gets or sets the value of navigation pane to be visible when displaying a document.
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.DocumentDisplayingEventArgs.InitialOrientation">
            <summary>
Gets or sets the value of page orientation when displaying a document.
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.DocumentDisplayingEventArgs.InitialZoomPercent">
            <summary>
Gets or sets the value of page zoom percent when displaying a document.
</summary>
            <remarks> This value ranges from .01f to 64.0f. </remarks>
        </member>
        <member name="P:Foxit.PDF.Viewer.DocumentDisplayingEventArgs.InitialZoomMode">
            <summary>
Gets or sets the value of page zoom mode when displaying a document.
</summary>
            <remarks> If zoom percent mode is selected then the value of <see cref="P:Foxit.PDF.Viewer.DocumentDisplayingEventArgs.InitialZoomPercent" /> has to be specified. Otherwise it will be .01f by default. </remarks>
        </member>
        <member name="P:Foxit.PDF.Viewer.DocumentDisplayingEventArgs.InitialPageMode">
            <summary>
Gets or sets the value of page mode when displaying a document.
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.DocumentDisplayingEventArgs.InitialPage">
            <summary>
Gets or sets the value of initial page when displaying a document.
</summary>
            <remarks>The value will be accepted only if it is a positive number between 1 and total number of pages in the document.</remarks>
        </member>
        <member name="P:Foxit.PDF.Viewer.DocumentDisplayingEventArgs.Cancel">
            <summary>
Gets or sets a value for cancelling the Pdf Document while displaying.
</summary>
            <remarks>True will cancel the PDF document displaying and <see cref="!:FileOpenFailed" /> event will be raised.</remarks>
        </member>
        <member name="P:Foxit.PDF.Viewer.DocumentDisplayingEventArgs.Document">
            <summary>
Gets the PdfDocument.
</summary>
            <remarks>Gets the PDF document PdfViewer going to display.</remarks>
        </member>
        <member name="T:Foxit.PDF.Viewer.DocumentDisplayingEventArgs">
            <summary>
Provides data for the <see cref="!:DocumentDisplaying" /> event. 
</summary>
            <example>For example refer to <see cref="!:DocumentDisplaying" /> event.</example>
            <licensing>
This class is a Foxit PDF Viewer feature. The following license is required for non-evaluation usage:
<list type="bullet"><item>Foxit PDF Viewer for .NET SDK</item></list></licensing>
        </member>
        <member name="T:Foxit.PDF.Viewer.Orientation">
            <summary>
Specifies the orientation types for a page. 
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.Orientation.RotatedCounterClockwise90d">
            <summary>
Shows that page is rotated counter clockwise to 90 degree. 
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.Orientation.Rotated180d">
            <summary>
Shows that page is rotated to 180 degree. 
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.Orientation.RotatedClockwise90d">
            <summary>
Shows that page is rotated clockwise to 90 degree. 
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.Orientation.Normal">
            <summary>
Shows that page is not rotated. 
</summary>
        </member>
        <member name="M:Foxit.PDF.Viewer.PdfDocument.Dispose">
            <summary>
Releases all resources used by the document.
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfDocument.Permissions">
            <summary>
Gets the <see cref="T:Foxit.PDF.Viewer.Permission" /> information of the document.
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfDocument.ZoomMode">
            <summary>
Gets the initial zoom mode of the document.
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfDocument.VisibleNavigationPane">
            <summary>
Gets the initial navigation pane of the document.
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfDocument.PageMode">
            <summary>
Gets the initial page mode of the document.
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfDocument.InitialPage">
            <summary>
Gets the initial page to be displayed.
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfDocument.PageCount">
            <summary>
Gets the page count PDF document.
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfDocument.Bookmarks">
            <summary>
Gets the collection of bookmarks present in the PDF document.
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfDocument.Title">
            <summary>
Gets the title property of the PDF document.
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfDocument.Subject">
            <summary>
Gets the subject property of the PDF document.
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfDocument.Producer">
            <summary>
Gets the producer property of the PDF document.
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfDocument.Keywords">
            <summary>
Gets the keywords property of the PDF document.
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfDocument.Creator">
            <summary>
Gets the creator property of the PDF document.
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfDocument.Author">
            <summary>
Gets the author property of the PDF document.
</summary>
        </member>
        <member name="M:Foxit.PDF.Viewer.PdfDocument.GetPage(System.Int32)">
            <summary>
Gets the <see cref="T:Foxit.PDF.Viewer.PdfPage" /> which contains page details like width and height.
</summary>
            <param name="pageNumber">Page number of the <see cref="T:Foxit.PDF.Viewer.PdfPage" /> required. </param>
            <remarks>Page number starting from one.</remarks>
            <returns>
                <see cref="T:Foxit.PDF.Viewer.PdfPage" /> related to the respective page number.</returns>
        </member>
        <member name="M:Foxit.PDF.Viewer.PdfDocument.#ctor(System.Byte[],System.String)">
            <summary>
Initializes a new instance of the <see cref="T:Foxit.PDF.Viewer.PdfDocument" /> class.
</summary>
            <param name="data">Byte array of the input PDF data. </param>
            <param name="password">Password to open the PDF file.</param>
        </member>
        <member name="M:Foxit.PDF.Viewer.PdfDocument.#ctor(System.IO.Stream,System.String)">
            <summary>
Initializes a new instance of the <see cref="T:Foxit.PDF.Viewer.PdfDocument" /> class.
</summary>
            <param name="stream">
                <see cref="T:System.IO.Stream" />containing the PDF data.</param>
            <param name="password">Password to open the PDF file. </param>
        </member>
        <member name="M:Foxit.PDF.Viewer.PdfDocument.#ctor(System.String,System.String)">
            <summary>
Initializes a new instance of the <see cref="T:Foxit.PDF.Viewer.PdfDocument" /> class.
</summary>
            <param name="filePath">Physical file path of the PDF.</param>
            <param name="password">Password to open the PDF file.</param>
        </member>
        <member name="M:Foxit.PDF.Viewer.PdfDocument.#ctor(System.Byte[])">
            <summary>
Initializes a new instance of the <see cref="T:Foxit.PDF.Viewer.PdfDocument" /> class.
</summary>
            <param name="data">Byte array of the input PDF data.</param>
        </member>
        <member name="M:Foxit.PDF.Viewer.PdfDocument.#ctor(System.IO.Stream)">
            <summary>
Initializes a new instance of the <see cref="T:Foxit.PDF.Viewer.PdfDocument" /> class.
</summary>
            <param name="stream">
                <see cref="T:System.IO.Stream" />containing the PDF data.</param>
        </member>
        <member name="M:Foxit.PDF.Viewer.PdfDocument.#ctor(System.String)">
            <summary>
Initializes a new instance of the <see cref="T:Foxit.PDF.Viewer.PdfDocument" /> class.
</summary>
            <param name="filePath">Physical file path of the PDF.</param>
        </member>
        <member name="T:Foxit.PDF.Viewer.PdfDocument">
            <summary>
Represents a Pdf document.
</summary>
            <example>This example demonstrates how to load a PDF file in <see cref="T:Foxit.PDF.Viewer.PdfViewer" /> control using <see cref="T:Foxit.PDF.Viewer.PdfDocument" />.<p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports Foxit.PDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
    Private Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs) Handles MyBase.Load
        ' Load and Open the document in Viewer.
        Dim MyDocument As New PdfDocument("C:\MyDocument.pdf")
        MyPdfViewer.Open(MyDocument)
    End Sub

End Class						
</code><code lang="C#">
using System;
using System.Windows.Forms;
using Foxit.PDF.Viewer;

namespace PDFViewerDemo
{
    public class Form1 : Form
    {
        private Foxit.PDF.Viewer.PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
            this.Load += new EventHandler(Form1_Load);
        }

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            // Load and Open the document in Viewer.
            PdfDocument document = new PdfDocument(@"C:\MyDocument.pdf");
            pdfViewer.Open(document);
        }
    }
}
</code></example>
            <licensing>
This class is a Foxit PDF Viewer feature. The following license is required for non-evaluation usage:
<list type="bullet"><item>Foxit PDF Viewer for .NET SDK</item></list></licensing>
        </member>
        <member name="T:Foxit.PDF.Viewer.Units">
            <summary>
Represents a UnitType value. 
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.Units.PdfPoints">
            <summary>
Unit values in Points.
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.Units.Inches">
            <summary>
Unit values in Inches.
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.Units.Millimeters">
            <summary>
Unit values in Millimeters.
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.Units.Centimeters">
            <summary>
Unit values in Centimeters.
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.Units.Picas">
            <summary>
Unit values in Picas.
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfPage.Height">
            <summary>
Gets the height of pdf page in points.
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.PdfPage.Width">
            <summary>
Gets the width of pdf page in points.
</summary>
        </member>
        <member name="T:Foxit.PDF.Viewer.PdfPage">
            <summary>
Represents a Pdf page.
</summary>
            <licensing>
This class is a Foxit PDF Viewer feature. The following license is required for non-evaluation usage:
<list type="bullet"><item>Foxit PDF Viewer for .NET SDK</item></list></licensing>
        </member>
        <member name="P:Foxit.PDF.Viewer.Permission.AllowContentCopying">
            <summary>
Gets the copy permission of the document. 
</summary>
            <remarks> True value indicates that the document is copy protected. </remarks>
        </member>
        <member name="P:Foxit.PDF.Viewer.Permission.AllowPrinting">
            <summary>
Gets the print permission of the document. 
</summary>
            <remarks> True value indicates that the document is print protected. </remarks>
        </member>
        <member name="T:Foxit.PDF.Viewer.Permission">
            <summary>
Provides information about the permissions of the <see cref="T:Foxit.PDF.Viewer.PdfDocument" />. 
</summary>
            <licensing>
This class is a Foxit PDF Viewer feature. The following license is required for non-evaluation usage:
<list type="bullet"><item>Foxit PDF Viewer for .NET SDK</item></list></licensing>
        </member>
        <member name="T:Foxit.PDF.Viewer.PageDisplayMode">
            <summary>
Represents the collection of page display mode types. 
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.PageDisplayMode.TwoUpContinuousWithCoverPage">
            <summary>
Shows the two up page view with cover page and scrolling enabled. 
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.PageDisplayMode.TwoUpWithCoverPage">
            <summary>
Shows the two up page view with cover page. 
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.PageDisplayMode.TwoUpContinuous">
            <summary>
Shows two up page view with scrolling enabled. 
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.PageDisplayMode.TwoUp">
            <summary>
Shows the two up page view. 
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.PageDisplayMode.SinglePageContinuous">
            <summary>
Shows the single page view with scrolling enabled. 
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.PageDisplayMode.SinglePage">
            <summary>
Shows the single page view. 
</summary>
        </member>
        <member name="T:Foxit.PDF.Viewer.NavigationPane">
            <summary>
Specifies the Navigation window type shown when the PDF file is being viewed. 
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.NavigationPane.PageThumbnail">
            <summary>
Shows that Thumbnail window is visible. 
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.NavigationPane.Bookmark">
            <summary>
Shows that Bookmark window is visible. 
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.NavigationPane.None">
            <summary>
Shows that no navigation window is visible. 
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.BookmarkList.Count">
            <summary>
Gets the count of the bookmarks present in the <see cref="T:Foxit.PDF.Viewer.PdfDocument" />.
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.BookmarkList.Item(System.Int32)">
            <summary>
Gets a bookmark from bookmark list.
</summary>
        </member>
        <member name="M:Foxit.PDF.Viewer.BookmarkList.GetEnumerator">
            <summary>
Returns an enumerator that iterates through a collection of bookmarks.
</summary>
            <returns> An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection of bookmarks. </returns>
        </member>
        <member name="T:Foxit.PDF.Viewer.BookmarkList">
            <summary>
Represents a collection of bookmarks.
</summary>
            <example>The following example will get the collection of bookmarks from <see cref="T:Foxit.PDF.Viewer.PdfDocument" /> object. <p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports Foxit.PDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
    Private Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs) Handles MyBase.Load
        Dim MyDocument As New PdfDocument("C:\MyDocument.pdf")
    
        ' Get the Bookmark List from PDF document object.
        Dim MyBookmarksList As BookmarkList = MyDocument.Bookmarks

        ' Get the count of bookmarks as below.
        Dim MyBookmarksCount As Integer = MyBookmarksList.Count

    End Sub

End Class						
</code><code lang="C#">								
using System;
using System.Windows.Forms;
using Foxit.PDF.Viewer;

namespace PDFViewerDemo
{
    public class Form1 : Form
    {
        private Foxit.PDF.Viewer.PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
            this.Load += new EventHandler(Form1_Load);
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            PdfDocument document = new PdfDocument(@"C:\MyDocument.pdf");

            // Get the Bookmark List from PDF document object.
            BookmarkList bookmarkList = document.Bookmarks;

            // Get the count of bookmarks as below.
            int bookmarksCount = bookmarkList.Count;
       
        }
    }
}
</code></example>
            <licensing>
This class is a Foxit PDF Viewer feature. The following license is required for non-evaluation usage:
<list type="bullet"><item>Foxit PDF Viewer for .NET SDK</item></list></licensing>
        </member>
        <member name="P:Foxit.PDF.Viewer.Bookmark.PageNumber">
            <summary>
Get the page number to which the bookmark will navigate.
</summary>
            <remarks>
Returns -1 if the bookmark is not having a valid page number.
</remarks>
        </member>
        <member name="P:Foxit.PDF.Viewer.Bookmark.Bookmarks">
            <summary>
Gets the collection of child bookmarks present in the document.
</summary>
        </member>
        <member name="P:Foxit.PDF.Viewer.Bookmark.Text">
            <summary>
Gets the text of the bookmark.
</summary>
        </member>
        <member name="T:Foxit.PDF.Viewer.Bookmark">
            <summary>
Represents a bookmark.
</summary>
            <example>The following example will get a bookmark from the child bookmark list.<p /><code lang="VB">
Imports System
Imports System.Windows.Forms
Imports Foxit.PDF.Viewer

Public Class Form1
    Inherits System.Windows.Forms.Form

    Private MyPdfViewer As PdfViewer

    Sub New()
        InitializeComponent()
    End Sub

    Private Sub InitializeComponent()
        Me.MyPdfViewer = New PdfViewer()
        Me.Controls.Add(MyPdfViewer)
    End Sub

    Shared Sub Main()
        Application.Run(New Form1())
    End Sub			
    
    Private Sub Form1_Load(ByVal sender As Object, ByVal e As EventArgs) Handles MyBase.Load
        Dim MyDocument As PdfDocument = New PdfDocument("C:\MyDocument.pdf")

        ' Get the bookmark list from PDF document object.
        Dim MyBookmarksList As BookmarkList = MyDocument.Bookmarks
        
        ' Get a single bookmark from the list by specifying the index between 0 and count of bookmarks.
        Dim MyBookmark As Bookmark = MyBookmarksList(1) 
        
        ' Open the document in Viewer.
        MyPdfViewer.Open(MyDocument)

        ' Navigate to the selected bookmark.
        MyPdfViewer.Navigate(MyBookmark)
    End Sub

End Class        
</code><code lang="C#">
using System;
using System.Windows.Forms;
using Foxit.PDF.Viewer;

namespace PDFViewerDemo
{
    public class Form1 : System.Windows.Forms.Form
    {
        private PdfViewer pdfViewer;

        public Form1()
        {
            InitializeComponent();
            this.Load+=new EventHandler(Form1_Load);
        }

        private void InitializeComponent()
        {
            this.pdfViewer = new PdfViewer();
            this.Controls.Add(pdfViewer);
        }

        [STAThread]
        static void Main()
        {
            Application.Run(new Form1());
        }			

        private void Form1_Load(object sender, EventArgs e)
        {
            PdfDocument document = new PdfDocument(@"C:\MyDocument.pdf");

            // Get the bookmark list from PDF document object.
            BookmarkList bookmarksList = document.Bookmarks;
            
            // Get a single bookmark from the list by specifying the index between 0 and count of bookmarks.
            Bookmark bookmark = bookmarksList[2];

            // Open the document in Viewer.
            pdfViewer.Open(document);

            // Navigate to the selected bookmark.
            pdfViewer.Navigate(bookmark);			
        }
    }
}
</code></example>
            <licensing>
This class is a Foxit PDF Viewer feature. The following license is required for non-evaluation usage:
<list type="bullet"><item>Foxit PDF Viewer for .NET SDK</item></list></licensing>
        </member>
        <member name="T:Foxit.PDF.Viewer.InvalidPasswordException">
            <summary>
Represents a InvalidPasswordException
</summary>
            <licensing>
This class is a Foxit PDF Viewer feature. The following license is required for non-evaluation usage:
<list type="bullet"><item>Foxit PDF Viewer for .NET SDK</item></list></licensing>
        </member>
        <member name="T:Foxit.PDF.Viewer.DocumentLoadException">
            <summary>
Represents a DocumentLoadException
</summary>
            <licensing>
This class is a Foxit PDF Viewer feature. The following license is required for non-evaluation usage:
<list type="bullet"><item>Foxit PDF Viewer for .NET SDK</item></list></licensing>
        </member>
        <member name="T:Foxit.PDF.Viewer.PdfViewerException">
            <summary>
Represents a PdfViewerException
</summary>
            <licensing>
This class is a Foxit PDF Viewer feature. The following license is required for non-evaluation usage:
<list type="bullet"><item>Foxit PDF Viewer for .NET SDK</item></list></licensing>
        </member>
        <member name="M:FPDFPageObj_SetDashPhase(System.Void*,System.Double)">
Sets dash phase of a page object.
@param[in] page_object		- Handle of a page object. It could be path_object or stroke text_object.
@param[in] phase_value		- The dash phase value.
@note   The dash phase specifies the distance into the dash pattern where you can start the dash.
@retval None.

</member>
        <member name="M:FPDFPageObj_GetDashPhase(System.Void*)">
Gets dash phase of a page object.
@param[in] page_object	- Handle of a page object. It could be path_object or stroke text_object.
@note   The dash phase specifies the distance into the dash pattern at which to start the dash.
@retval The dash phase value of a page object.

</member>
        <member name="M:FPDFPageObj_SetDashArray(System.Void*,System.Int32,System.Double)">
Sets dash array elements of a page object.
@param[in] page_object	- Handle of a page object. It could be path_object or stroke text_object.
@param[in] index			- The index of a dash array element.
@param[in] dash_value		- The dash value of specific index of the dash array.
@note	  The dash array's elements are numbers that specify the lengths of alternating dashes and gaps;
        the numbers must be nonnegative and not all zero.
@retval None.

</member>
        <member name="M:FPDFPageObj_GetDashArray(System.Void*,System.Int32)">
 Get dash array elements of a page object.
 @param[in] page_object	- Handle of a page object. It could be path_object or stroke text_object.
 @param[in] index			- The index of a dash array element.
 @note	    The dash array's elements are numbers that specify the lengths of alternating dashes and gaps;
	    the numbers must be nonnegative and not all zero.
 @retval   Return the dash value of the specific index of the dash array.

</member>
        <member name="M:FPDFPageObj_SetDashCount(System.Void*,System.Int32)">
Sets dash count of a page object.
@param[in] page_object	- Handle of a page object. It could be path_object or stroke text_object.
@param[in] count			- The dash count of a page object.
@note Setting the count will release the old dash array of the page object and allocate a new dash array.
@retval None.

</member>
        <member name="M:FPDFPageObj_GetDashCount(System.Void*)">
Gets dash count of a page object.
@param[in] page_object	- Handle of a page object. It could be path_object or stroke text_object.
@retval The dash count of a page object.

</member>
        <member name="M:FPDFPageObj_SetMiterLimit(System.Void*,System.Double)">
 Sets the miter limit of a page object.
 @param[in] page_object	- Handle of a page object. It could be path_object or stroke text_object.
 @param[in] miter_limit	- The miter limit of a page_object.
 @note		The miter limit imposes a maximum on the ratio of the miter length to the line width.
			When the limit is exceeded, the join is converted from a miter to a bevel.
 @retval   None.

</member>
        <member name="M:FPDFPageObj_GetMiterLimit(System.Void*)">
 Gets the miter limit of a page object.
 @param[in] page_object	- Handle of a page object. It could be path_object or stroke text_object.
 @note		The miter limit imposes a maximum on the ratio of the miter length to the line width.
			When the limit is exceeded, the join is converted from a miter to a bevel.
 @retval	The miter limit of a page_object.

</member>
        <member name="M:FPDFPageObj_SetLineJoinStyle(System.Void*,System.Int32)">
Sets the line join style of a page object.
@param[in] page_object	- Handle of a page object. It could be path_object or stroke text_object.
@param[in] style			- The line join styles that is defined above.
@retval  None.

</member>
        <member name="M:FPDFPageObj_GetLineJoinStyle(System.Void*)">
 @name Line join styles
@{

@brief The outer edges of the strokes for the two segments are extended  until they meet at an angle
@brief An arc of a circle with a diameter equal to the line width is drawn around the point where the two segments meet, connecting the outer edges of  the strokes for the two segments. 
@brief  The two segments are finished with butt caps and the resulting notch beyond the ends of the segments is filled with a triangle.  
@}
Gets the line join style of a page object.
@param[in] page_object	- Handle of a page object. It could be path_object or stroke text_object.
@retval Return the line join styles that is defined above.

</member>
        <member name="M:FPDFPageObj_SetLineCapStyle(System.Void*,System.Int32)">
Sets the line cap style of a page object.
@param[in] page_object	- Handle of a page object. It could be path_object or stroke text_object.
@param[in] style		- The line cap styles defined above.
@retval None.

</member>
        <member name="M:FPDFPageObj_GetLineCapStyle(System.Void*)">
 @name Line cap styles
@{

@brief The stroke is squared off at the endpoint of the path. There is no projection beyond the end of the path. 
@brief A semicircular arc with a diameter equal to the line width is drawn around the endpoint and filled in. 
@brief The stroke continues beyond the endpoint of the path for a distance equal to half the line width and is squared off. 
@}
Gets the line cap style of a page object.
@param[in] page_object	- Handle of a page object. It could be path_object or stroke text_object.
@retval The line cap styles defined above.

</member>
        <member name="M:FPDFPageObj_SetLineWidth(System.Void*,System.Double)">
Sets the line width of a path object.
@param[in] page_object	- Handle of a page object. It could be path_object or stroke text_object.
@param[in] width			- The line width of the page object.
@retval None.

</member>
        <member name="M:FPDFPageObj_GetLineWidth(System.Void*)">
Gets the line width of a path object.
@param[in] page_object - Handle of a page object. It could be path_object or stroke text_object.
@retval Return the line width of the page object.

</member>
        <member name="M:FPDFPageObj_SetStrokeColor(System.Void*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
Sets the stroke color of a page object.
@param[in] page_object - Handle of a page object. It could be text_object, path_object and uncolored images.
@param[in] argb	- The stroke color of a page object. Constructed by 0xaarrggbb.
@retval None.

</member>
        <member name="M:FPDFPageObj_GetStrokeColor(System.Void*)">
Gets the stroke color of a page object.
@param[in] page_object - Handle of a page object. It could be text_object, path_object and uncolored images.
@retval The stroke color of a page object. Constructed by 0xaarrggbb.

</member>
        <member name="M:FPDFPageObj_SetFillColor(System.Void*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
Sets the fill color of a page object.
@param[in] page_object	- Handle of a page object. It could be text_object, path_object and uncolored images.
@param[in] argb			- The fill color of a page object. Constructed by 0xaarrggbb.
@retval None.

</member>
        <member name="M:FPDFPageObj_GetFillColor(System.Void*)">
Gets the fill color of a page object.
@param[in] page_object	- Handle of a page object. It could be text_object, path_object and uncolored images.
@retval The fill-color of a page object. Constructed by 0xaarrggbb.

</member>
        <member name="M:FPDFPageObj_RemoveClip(System.Void*,System.Int32)">
 Removes a clip from the page object.
 @param[in] page_object - Handle to a page object. Returned by FPDFPageObj_NewTextObj,FPDFPageObj_NewTextObjEx,
			   FPDFPageObj_NewPathObj, FPDFPageObj_NewImageObj, etc.
 @param[in] index	 	- The index of the clip.
 @retval None.

</member>
        <member name="M:FPDFPageObj_AppendPathToClip(System.Void*,System.Void*,System.Int32)">
 Appends a path to the current clip.
 @param[in] page_object - Handle to a page object. Returned by FPDFPageObj_NewTextObj,FPDFPageObj_NewTextObjEx,
			   FPDFPageObj_NewPathObj, FPDFPageObj_NewImageObj, etc.
 @param[in] path	 - Handle to a path. Returned by FPDFPathObj_GetPath.
 @param[in] type	 - The fill mode types that is defined above.
 @retval TRUE for success, otherwise FALSE.

</member>
        <member name="M:FPDFPageObj_AddClip(System.Void*,System.Void*,System.Int32)">
 @name Fill mode types
@{

@brief No fill color.
@brief Represents a fill mode in which the system fills the area between odd-numbered and even-numbered polygon sides on each scan line.
@brief Represents a fill mode in which the system uses the direction in which a figure was drawn to determine whether to fill the area.
@}
 Adds a clip to a page object.
 @param[in] page_object - Handle to a page object. Returned by FPDFPageObj_NewTextObj,FPDFPageObj_NewTextObjEx,
			   FPDFPageObj_NewPathObj, FPDFPageObj_NewImageObj, etc.
 @param[in] path	 - Handle to a path. Returned by FPDFPathObj_GetPath.
 @param[in] type	 - The fill mode types that is defined above.
 @retval TRUE for success, otherwise FALSE.

</member>
        <member name="M:FPDFPageObj_GetClip(System.Void*,System.Int32)">
 Gets the clip path of a page object.
 @param[in] page_object	- Handle to a page object. Returned by FPDFPageObj_NewTextObj,FPDFPageObj_NewTextObjEx,
				  FPDFPageObj_NewPathObj, FPDFPageObj_NewImageObj, etc.
 @param[in] index		- The index of a path.
 @retval Handle to a path.

</member>
        <member name="M:FPDFPageObj_GetClipCount(System.Void*)">
 Gets the clip number of a page object.
 @param[in] page_object - Handle to a page object. Returned by FPDFPageObj_NewTextObj,FPDFPageObj_NewTextObjEx,
							FPDFPageObj_NewPathObj, FPDFPageObj_NewImageObj, etc.
 @retval The clip count.

</member>
        <member name="M:FPDFPageObj_GetBBox(System.Void*,System.Double*,System.Double*,System.Double*,System.Double*)">
 Gets page object type.
 @param[in] page_object	- Handle to a page object. Returned by FPDFPageObj_NewTextObj,FPDFPageObj_NewTextObjEx,
				  FPDFPageObj_NewPathObj, FPDFPageObj_NewImageObj, etc.
 @param[in] left		- Pointer to a double value receiving the left of a rectangle (in points).
 @param[in] bottom		- Pointer to a double value receiving the bottom of a rectangle (in points).
 @param[in] right		- Pointer to a double value receiving the right of a rectangle (in points).
 @param[in] top		- Pointer to a double value receiving the top of a rectangle (in points).
 @retval None.

</member>
        <member name="M:FPDFPageObj_GetType(System.Void*)">
 @name The page object constants.
@{

@brief Text object 
@brief Path object 
@brief Image object 
@brief Shading object 
@brief From object 
@}
 Gets page object type.
 @param[in] page_object  - Handle to a page object. Returned by FPDFPageObj_NewTextObj,FPDFPageObj_NewTextObjEx,
			    FPDFPageObj_NewPathObj, FPDFPageObj_NewImageObj, etc.
 @retval One of the FPDF_PAGEOBJ_xxxx constants defined above.

</member>
        <member name="M:FPDFPageObj_Free(System.Void*)">
 Free a page object.
 @param[in] page_object - Handle to a page object. Returned by FPDFPageObj_NewTextObj,FPDFPageObj_NewTextObjEx,
							FPDFPageObj_NewPathObj, FPDFPageObj_NewImageObj, etc.
 @retval None.

</member>
        <member name="M:FPDFPageObj_Clone(System.Void*)">
 Creates a new page object based on this page object.
 @param[in] page_object - Handle to a page object. Returned by FPDFPageObj_NewTextObj,FPDFPageObj_NewTextObjEx,
						   FPDFPageObj_NewPathObj, FPDFPageObj_NewImageObj, etc.
 @retval Handle to a page object.

</member>
        <member name="M:FPDFPageObj_Transform(System.Void*,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
 Transforms (scale, rotate, shear, move) page object.
 @param[in] page_object - Handle to a page object. Returned by FPDFPageObj_NewTextObj,FPDFPageObj_NewTextObjEx,
						   FPDFPageObj_NewPathObj, FPDFPageObj_NewImageObj, etc.
 @param[in] a	- The coefficient "a" of the matrix.
 @param[in] b	- The coefficient "b" of the matrix.
 @param[in] c	- The coefficient "c" of the matrix.
 @param[in] d	- The coefficient "d" of the matrix.
 @param[in] e	- The coefficient "e" of the matrix.
 @param[in] f	- The coefficient "f" of the matrix.
 @retval None.

</member>
        <member name="M:FPDFPage_GenerateContent(System.Void*)">
 Generates PDF Page content.
 @param[in] page	- Handle to a page. Returned by FPDFPage_New.
 @note		Before you save the page to a file, or reload the page, you must call the FPDFPage_GenerateContent function
			or the changed information will be lost.
 @retval	TRUE for success, otherwise FALSE.

</member>
        <member name="M:FPDFPage_GetPageObjectIndex(System.Void*,System.Void*)">
Gets the index of the page object in the specify page.
@param[in] page		- Handle to a page. Returned by FPDFPage_New.
@param[in] page_obj	- Handle to a page object. Returned by FPDFPageObj_NewTextObj,FPDFPageObj_NewTextObjEx, FPDFPageObj_NewPathObj, FPDFPageObj_NewImageObj, etc.
@retval If successful, returns the index of the page object. Otherwise, returns -1.

</member>
        <member name="M:FPDFPage_GetObject(System.Void*,System.Int32)">
Gets page object by index.
@param[in] page	- Handle to a page. Returned by FPDFPage_New.
@param[in] index	- The index of a page object.
@retval The handle to the page object. If failed, NULL is returned.

</member>
        <member name="M:FPDFPage_CountObject(System.Void*)">
Gets number of page objects inside the page.
@param[in] page - Handle to a page. Returned by FPDFPage_New.
@retval The number of page objects.

</member>
        <member name="M:FPDFPage_DeleteObject(System.Void*,System.Int32)">
Deletes an object from the page. The page object is automatically freed.
@param[in] page	- Handle to a page. Returned by FPDFPage_New.
@param[in] index	- The index of a page object.
@retval None

</member>
        <member name="M:FPDFPage_InsertObject(System.Void*,System.Void*)">
 @name Index values for getting boxes, used in xxx_GetRectangle and xxx_GetBBox functions.
@{

@brief The visible rectangle.
@brief The bounding box of the all object in this page.
@brief The boundaries of the physical medium on which the page is to be printed.
@brief The region to which the contents of the page are to be clipped (cropped) when displayed or printed. 
@brief The region to which the contents of the page should be clipped when output in a production environment. 
@brief The intended dimensions of the finished page after trimming.  
@brief The extent of the page's meaningful content (including potential white space) as intended by the page's creator.
@}
Inserts an object to the page. The page object is automatically freed.
@param[in] page		- Handle to a page. Returned by FPDFPage_New.
@param[in] page_obj	- Handle to a page object. Returned by FPDFPageObj_NewTextObj,FPDFPageObj_NewTextObjEx or FPDFPageObj_NewPathObj.
@retval None

</member>
        <member name="M:FPDFPage_Delete(System.Void*,System.Int32)">
Deletes a PDF page.
@param[in] document	- Handle to a document. Returned by FPDF_LoadDocument and FPDF_CreateNewDocument.
@param[in] page_index - The index of a page.
@retval None

</member>
        <member name="M:FPDFPage_New(System.Void*,System.Int32,System.Double,System.Double)">
Constructs an empty page.
@param[in] document	- Handle to a document. Returned by FPDF_LoadDocument and FPDF_CreateNewDocument.
@param[in] page_index - The index of a page.
@param[in] width		- The page width.
@param[in] height		- The page height.
@note		Loaded page can be deleted by FPDFPage_Delete.
@retval	The handle to the page.

</member>
        <member name="M:FPDFBookmark_SetActionEx(System.Void*,System.Void*,System.Void*)">
Sets the action actuation of bookmark.
@param[in] bookmark	- Handle to a bookmark.
@param[in] action		- Handle to action.
@param[in] doc		- Handle to a document.
@retval TRUE for success, otherwise FALSE.

</member>
        <member name="M:FPDFBookmark_SetAction(System.Void*,System.Void*)">
Sets the action actuation of bookmark.
@param[in] bookmark	- Handle to a bookmark.
@param[in] action		- Handle to action.
@retval TRUE for success, otherwise FALSE.

</member>
        <member name="M:FPDFBookmark_SetFontStyle(System.Void*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
Sets the bookmark font (such as bold, italic and so on).
@param[in] bookmark	- Handle to a bookmark.
@param[in] Fontstyle	- Font type defined by the value above.
@note The bookmark font style such as bold,italic and so on.
@retval TRUE for success, otherwise FALSE.

</member>
        <member name="M:FPDFBookmark_SetColorRef(System.Void*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
Sets the bookmark color. The color value such as (0xFF00FF).
@param[in] bookmark	- Handle to a bookmark.
@param[in] color		- Set color value.
@retval TRUE for success, otherwise FALSE.

</member>
        <member name="M:FPDFBookmark_SetTitleA(System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 @name Flags for Bookmark Font Style
@{

@brief Normal typeface 
@brief Italic 
@brief Bold
@}
Sets the bookmark title.
@param[in] bookmark	- Handle to a bookmark.
@param[in] titlename	- Title name.
@retval TRUE for success, otherwise FALSE.

</member>
        <member name="M:FPDFBookmark_DeleteBookmark(System.Void*,System.Void*)">
Deletes the bookmark object
@param[in] document - Handle to a document returned by FPDF_loadDocument function.
@param[in] bookmark - Handle to a bookmark.
@retval TRUE for success, otherwise FALSE.

</member>
        <member name="M:FPDFBookmark_AddBookmarkA(System.Void*,System.Void*,System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Adds the bookmark to the document.
@param[in] document		- Handle to a document returned by FPDF_loadDocument function.
@param[in] parent			- Parent node.
@param[in] InsterAfter	- Former node.
@param[in] titlename		- Bookmark name.
@retval Return the setting bookmark object, if successful. If failed, NULL is returned.

</member>
        <member name="M:FPDFDest_SetFitBVertParam(System.Void*,System.Double)">
Sets the parameters of FitBV zoom mode.
@param[in] dest	- Handle to the destination returned by FPDF_CreateDest.
@param[in] param	- The parameters of the horizontal coordinate positioned at the left edge of the window.
@retval TRUE for success, otherwise FALSE.

</member>
        <member name="M:FPDFDest_SetFitBHorzParam(System.Void*,System.Double)">
Sets the parameters of FitBHorz zoom mode.
@param[in] dest	- Handle to the destination returned by FPDF_CreateDest.
@param[in] param	- The parameters of bounding box.
@retval TRUE for success, otherwise FALSE.

</member>
        <member name="M:FPDFDest_SetFitRectParam(System.Void*,System.Double,System.Double,System.Double,System.Double)">
 Sets the parameters of FitRect zoom mode. The rectangle range consists of left, bottom, right and top.
 @param[in] dest	- Handle to the destination returned by FPDF_CreateDest.
 @param[in] param	- The parameters's contents must be magnified just enough to fit the rectangle specified
			  		  by the coordinates left, bottom, right and top. Contents must fit entirely within the window both horizontally and vertically.
 @retval TRUE for success, otherwise FALSE.

</member>
        <member name="M:FPDFDest_SetFITVERTParam(System.Void*,System.Double)">
Sets the parameters of FITVERT zoom mode.
@param[in] dest	- Handle to the destination returned by FPDF_CreateDest.
@param[in] param	- The parameters of the horizontal coordinate positioned at the left edge of the window
@retval TRUE for success, otherwise FALSE.

</member>
        <member name="M:FPDFDest_SetFITHORZParam(System.Void*,System.Double)">
Sets the parameters for FITHORZ zoom mode.
@param[in] dest	- Handle to the destination returned by FPDF_CreateDest.
@param[in] param	- The parameters of the vertical coordinate positioned at the top edge of the window.
@retval TRUE for success, otherwise FALSE.

</member>
        <member name="M:FPDFDest_SetXYZParam(System.Void*,System.Double,System.Double,System.Double)">
Sets the parameters of xyz zoom mode.
@param[in] dest	- Handle to the destination returned by FPDF_CreateDest.
@param[in] x		- Left coordinate point
@param[in] y		- Top coordinate point
@param[in] z		- Zooming value
@retval TRUE for success, otherwise FALSE.

</member>
        <member name="M:FPDFDest_SetZoomMode(System.Void*,System.Int32)">
Sets the zoom mode.
@param[in] dest - Handle to the destination returned by FPDF_CreateDest.
@param[in] mode - The zoom mode of destination. Refer to the fpdfview.h, the definition of zoom mode.
@retval TRUE for success, otherwise FALSE.

</member>
        <member name="M:FPDF_DeleteDest(System.Void*)">
Deletes destination.
@param[in] dest - Handle to the destination returned by the FPDF_CreateDest.
@retval TRUE for success, otherwise FALSE.

</member>
        <member name="M:FPDF_CreateDest(System.Int32)">
Creates destination.
@param[in] mode - The mode of destination. Refer to the fpdfdoc.h, the definition of zoom mode.
@retval Handle to a destination or NULL if an error occurs.

</member>
        <member name="M:FPDFDest_SetPageIndex(System.Void*,System.Void*,System.Int32)">
 @name Flags for zoom modes
@{

@brief Zoom level with specified offset.
@brief Fit both the width and height of the page (whichever smaller).
@brief Fit the page width.
@brief Fit the page height.
@brief Fit a specific rectangle area within the window.
@brief Fit the bounding box entirely within the window both horizontally and vertically. 
@brief The contents of the page magnified just enough to fit the entire width of its bounding box within the window.
@brief The contents of the page magnified just enough to fit the entire height of its bounding box within the window.
@}
Sets the page pointed by destination.
@param[in] document	- Handle to a document returned by FPDF_LoadDocument or FPDF_LoadMemDocument.
@param[in] dest		- Handle to a destination.
@param[in] page_index - Page number.
@retval TRUE for success, otherwise FALSE.

</member>
        <member name="M:FPDFAction_SetDest(System.Void*,System.Void*)">
Sets the type of action's destination.
@param[in]  action	- Handle to a action.
@param[out] dest		- Handle to a destination, returned by FPDF_CreateDest.
@retval TRUE for success, otherwise FALSE.

</member>
        <member name="M:FPDFAction_GetURI(System.Void*,System.Void*,System.Void*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
Gets the URI path of Action.
@param[in]  action	- Handle to a action.
@param[out] buffer	- The buffer that will contain URL.
@param[in]  buflen	- The length of URL path.
@retval TRUE for success, otherwise FALSE.

</member>
        <member name="M:FPDFAction_SetURI(System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Sets the URI path of Action
@param[in] action		- Handle to a action.
@param[in] pFilePath	- URL address.
@retval TRUE for success, otherwise FALSE.

</member>
        <member name="M:FPDFAction_SetFilePathA(System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
Sets the file path of action. The path can be URL.
@param[in] action		- Handle to a action.
@param[in] pFilePath	- File path.
@param[in] bURL		- Whether the path is URL.
@retval TRUE for success, otherwise FALSE.

</member>
        <member name="M:FPDF_DeleteAction(System.Void*)">
Deletes an action.
@param[in] action - Handle to a action.
@retval TRUE for success, otherwise FALSE.

</member>
        <member name="M:FPDF_CreateAction(System.Void*,System.Int32)">
 @name Flags for Action type
@{

@brief Unsupported action type.
@brief Go to a destination within current document.
@brief Go to a destination within another document.
@brief Universal Resource Identifier, including web pages and other Internet based resources.
@brief Launch an application or open a file.
@}
Creates an action.
@param[in] document	- Handle to a document that will contains the action.
@param[in] actiontype - The type of the action. The values are defined above.
@retval Handle to a action or NULL if an error occurs.

</member>
        <member name="M:FPDF_VIEWERREF_SetPrintArea(System.Void*,System.Int32)">
Sets the printing area range.
@param[in] document	- Handle to a document returned by FPDF_loadDocument function.
@param[in] nRectType	- The type of page boundary. The values are defined above.
@retval TRUE for success, otherwise FALSE.

</member>
        <member name="M:FPDF_VIEWERREF_GetPrintArea(System.Void*)">
Gets the printing area range.
@param[in] doc - Handle to a document returned by FPDF_loadDocument function.
@retval Return the setting area range's type of printing. The type value is defined by the viewer reference above.

</member>
        <member name="M:FPDF_VIEWERREF_PrintScalingA(System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Sets the zoom proportion of print.
@param[in] document	- Handle to a document returned by FPDF_loadDocument function.
@param[in] value		- Set as None or AppDefault that is supported by the application.
@retval TRUE for success, otherwise FALSE.

</member>
        <member name="M:FPDF_VIEWERREF_SetPrintClip(System.Void*,System.Int32)">
Sets the cutting area of the printing page. The name of the page boundary to which the contents of a page are to be clipped when printing the document.
@param[in] document	- Handle to a document returned by FPDF_loadDocument function.
@param[in] nRectType	- Set the type of cutting area defined by the viewer reference above.
@retval TRUE for success, otherwise FALSE.

</member>
        <member name="M:FPDF_VIEWERREF_GetPrintClip(System.Void*)">
Gets the cutting area of the printing page.
@param[in] doc   - Document returned by FPDF_loadDocument function.
@retval Return the cutting area's type of the printing page. The type value is defined by the viewer reference above.

</member>
        <member name="M:FPDF_VIEWERREF_SetNumCoipes(System.Void*,System.Int32)">
Sets the printing quantity.
@param[in] document	- Handle to a document returned by FPDF_loadDocument function.
@param[in] value		- Quantity value.
@retval TRUE for success, otherwise FALSE.

</member>
        <member name="M:FPDF_VIEWERREF_GetNumCoipes(System.Void*)">
Gets the number of the printing pages.
@param[in] document   - Handle to a document returned by FPDF_loadDocument function.
@retval Return the setting number of printing pages.

</member>
        <member name="M:FPDF_VIEWERREF_SetPrintPageRange(System.Void*,System.Int32,System.Int32)">
Sets the printing page number of the document.
@param[in] document		- Handle to a document returned by FPDF_loadDocument function.
@param[in] printPageRange	- Page number range. Negative is invalid.
@retval TRUE for success, otherwise FALSE.

</member>
        <member name="M:FPDF_VIEWERREF_GetPrintPageRange(System.Void*,System.Int32*,System.Int32*)">
Gets the page number of the printing pages.
@param[in] doc	- Handle to a document returned by FPDF_loadDocument function.
@param[in] form	- Get the start page.
@param[in] to		- Get the end page.
@retval None

</member>
        <member name="M:FPDF_VIEWERREF_ViewArea(System.Void*,System.Int32)">
Sets the area range of displaying page.
@param[in] document	- Handle to a document returned by FPDF_loadDocument function.
@param[in] value		- Set the boundary of the printing page.
@retval TRUE for success, otherwise FALSE.

</member>
        <member name="M:FPDF_VIEWERREF_SetUIA(System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
Sets viewer preference info.
@param[in] document	- Handle to a document returned by FPDF_loadDocument function.
@param[in] tag		- Flag bit, can be "HideToolbar", "HideMenubar", "HideWindowUI", "FitWindow", "CenterWindow" and other characters info.
@param[in] value		- Setting value.
@retval TRUE for success, otherwise FALSE. 

</member>
        <member name="M:FPDF_VIEWERREF_GetUIA(System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 @name Flags for Page Boundary
@{

@brief The visible rectangle.
@brief The bounding box of the all object in this page.
@brief The boundaries of the physical medium on which the page is to be printed.
@brief The region to which the contents of the page are to be clipped (cropped) when displayed or printed. 
@brief The region to which the contents of the page should be clipped when output in a production environment. 
@brief The intended dimensions of the finished page after trimming. 
@brief The extent of the page's meaningful content (including potential white space) as intended by the page's creator.
@}
Gets viewer preference information
@param[in] doc	- Handle to a document returned by FPDF_loadDocument function.
@param[in] tag	- Flag bit, can be "HideToolbar", "HideMenubar", "HideWindowUI", "FitWindow", "CenterWindow" and other characters info
@retval Return the specified tag value.

</member>
        <member name="M:FPDF_SetMetaTextA(System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Sets PDF document info
 @param[in] document	- Handle to a document returned by FPDF_loadDocument.
 @param[in] tag		- The key string of the document info. It could be "Title","Subject","Author",
			  			  "Keywords","Creator" and other document information string.
 @param[in] value		- The information the user want to set it to.
 @retval TRUE for success, otherwise FALSE. 

</member>
        <member name="M:FPDF_SaveAsCopy(System.Void*,FPDF_FILEWRITE*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
Saves the copy of a specified document in custom way.
@param[in] document		- Handle to a document. Returned by FPDF_LoadDocument and FPDF_CreateNewDocument.
@param[in] pFileWrite		- A pointer to a custom file write structure.
@param[in] flags			- A creating flags.The values are defined above.
@retval TRUE for success, otherwise FALSE. 

</member>
        <member name="M:FPDF_SaveDocument(System.Void*,FPDF_FILEWRITE*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Byte!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Byte!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)">
@brief Incremental. 
@brief No Incremental. 
Saves the specified document in a custom way.
@param[in] document		- Handle to a document. Returned by FPDF_LoadDocument and FPDF_CreateNewDocument.
@param[in] pFileWrite		- A pointer to a custom file write structure.
@param[in] permissions	- The PDF document permissions that is defined above.
@param[in] UserPwd		- A 32-byte string user's password. Could be NULL.
@param[in] nUserPwdLen	- The length of the UserPwd.
@param[in] OwnerPwd		- A 32-byte string owner's password. Could be NULL.
@param[in] nOwnerPwdLen	- The length of the OwnerPwd.
@param[in] flags			- The creating flags.The values are defined above.
@retval TRUE for success, otherwise FALSE. 

</member>
        <member name="F:FPDF_FILEWRITE.WriteBlock">
Output a block of data in your custom way.
@param[out] pThis	- Pointer to the structure itself
@param[out] pData	- Pointer to a outputted buffer.
@param[in]  size	- The size of the buffer.
@retval Should be non-zero if successful, zero for error.

</member>
        <member name="F:FPDF_FILEWRITE.version">
@brief  Version number of the interface. Currently, it must be 1.

</member>
        <member name="T:FPDF_FILEWRITE">
@brief Structure for custom file write

</member>
        <member name="M:FPDF_SaveAsFile(System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Byte!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Byte!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong)">
 @name PDF document permissions, according to PDF Reference, Table 3.20
@{

@brief bit 3. Print the document. 
@brief bit 4. Modify the contents of the document by operations other than those controlled by bits 6, 9, and 11. 
@brief bit 5. Copy or otherwise extract text and graphics from the document by operations other than that is controlled by bit 10.
@brief bit 6. Add or modify text annotations and fill in interactive form fields.If bit 4 is also set, create or modify interactive form fields 
@brief bit 9. Fill in existing interactive form fields (including signature fields), even if bit 6 is clear. 
@brief bit 10. Extract text and graphics. 
@brief bit 11. Assemble the document, even if bit 4 is clear.
@brief bit 12. Print the document to a representation, which a faithful digital copy of the PDF content could be generated.
@}
Saves the specified document with a new name or format.
@param[in] document		- Handle to a document. Returned by FPDF_LoadDocument and FPDF_CreateNewDocument.
@param[in] file_name		- The path of PDF file that is different from the currently opened file path(including extension).//Õâ¾ä»°ºÍÔ­À´µÄ2.0²»Ò»Ñù£¬È·ÈÏÏÂ
@param[in] permissions	- The PDF document permissions defined above.
@param[in] UserPwd		- A 32-byte string user's password. Could be NULL.
@param[in] nUserPwdLen	- The length of the UserPwd.
@param[in] OwnerPwd		- A 32-byte string owner's password. Could be NULL.
@param[in] nOwnerPwdLen	- The length of the OwnerPwd.
@note		The new file_name should be different from the old one.
@retval	TRUE for success, otherwise FALSE. 

</member>
        <member name="M:FPDF_GetMetaText(System.Void*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Void*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
 Get a text from meta data of the document. Result is encoded in UTF-16LE.
 @param[in]  doc		- Handle to a document
 @param[in]  tag		- The tag for the meta data. Currently, It can be "Title", "Author", 
							"Subject", "Keywords", "Creator", "Producer", "CreationDate", or "ModDate".
							For detailed explanation of these tags and their respective values,
							please refer to PDF Reference 1.6, section 10.2.1, "Document Information Dictionary".
 @param[out] buffer	- A buffer for output the title. Can be NULL.
 @param[in]  buflen	- The length of the buffer, number of bytes. Can be 0.
 @note	No matter on what platform, the title is always output in UTF-16LE encoding, which means the buffer 
		can be regarded as an array of WORD (on Intel and compatible CPUs), each WORD represent the Unicode of 
		a character (some special Unicode may take 2 WORDs). The string is followed by two bytes of zero 
		indicating end of the string.

		The return value always indicated number of bytes required for the buffer, even when there is
		no buffer specified, or the buffer size is less then required. In this case, the buffer will not
		be modified.
 @retval Number of bytes the title consumes, including trailing zeros.

</member>
        <member name="M:FPDF_GetPageThumbnail(System.Void*)">
 Get stored thumbnail image of a page. Only supported on Windows system.
 @param[in] page -	Handle to a page.
 @note	If no thumbnail is stored for a page, the application can render the page into a small bitmap for thumbnail.
		The application should free the image with DeleteObject WIN32 function, when it's done with the thumbnail.
		NOTE: This function is not supported on Windows CE.
 @retval	Handle to a Windows bitmap storing the thumbnail. NULL if no thumbnail is stored for this page.

</member>
        <member name="M:FPDFLink_GetAction(System.Void*)">
Get action info of a link.
@param[in] link -	Handle to the link.
@retval	Handle to the action. NULL if there is no action associated with the link.

</member>
        <member name="M:FPDFLink_GetDest(System.Void*,System.Void*)">
 Get destination info of a link.
 @param[in] document	-	Handle to the document.
 @param[in] link		-	Handle to the link. Returned by FPDFLink_GetLinkAtPoint.
 @retval Handle to the destination. NULL if there is no destination associated with the link, in this case
		  the application should try FPDFLink_GetAction.

</member>
        <member name="M:FPDFLink_GetLinkAtPoint(System.Void*,System.Double,System.Double)">
 Find a link at specified point on a document page.
 @param[in] page	-	Handle to the document page.
 @param[in] x		-	The x coordinate of the point, specified in page coordinate system.
 @param[in] y		-	The y coordinate of the point, specified in page coordinate system.
 @note	The point coordinates are specified in page coordinate system. You can convert coordinates 
		from screen system to page system using FPDF_DeviceToPage functions.
 @retval Handle to the link. NULL if no link found at that point.

</member>
        <member name="M:FPDFDest_GetZoomParam(System.Void*,System.Int32)">
 Get zoom parameters.
 @param[in] dest	-	Handle to the destination.
 @param[in] param	-	Index of the parameter, starting with zero (see comments below).
 @note	Different zoom mode has different parameters. Here is a list:
		XYZ				Three parameters: x, y position in the page and the zoom ratio (0 for not specified).
		FITPAGE			No parameters;
		FITHORZ			One parameter: the top margin of the page.
		FITVERT			One parameter: the left margin of the page.
		FITRECT			Four parameters: the left, top, right, bottom margin of the fitting rectangle.
						Use 0-3 as parameter index for them, respectively.
 @retval A float number for the zoom parameter.

</member>
        <member name="M:FPDFDest_GetZoomMode(System.Void*)">
 @name Zoom modes
@{

@brief Zoom level with specified offset. 
@brief Fit both the width and height of the page (whichever smaller). 
@brief Fit the page width. 
@brief Fit the page height. 
@brief Fit a specific rectangle area within the window. 
@brief Fit the bounding box entirely within the window both horizontally and vertically. 
@brief The contents of the page magnified just enough to fit the entire width of its bounding box within the window.
@brief The contents of the page magnified just enough to fit the entire height of its bounding box within the window.
@}
Get the designated zoom mode of a destination.
@param[in] dest -	Handle to the destination.
@retval A type number as the zoom modes.

</member>
        <member name="M:FPDFDest_GetPageIndex(System.Void*,System.Void*)">
Get page index of a destination.
@param[in] document	-	Handle to the document.
@param[in] dest		-	Handle to the destination.
@retval The page index. Starting from 0 for the first page.

</member>
        <member name="M:FPDFAction_GetURIPath(System.Void*,System.Void*,System.Void*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
 Get URI path of a URI action.
 @param[in]  document	-	Handle to the document.
 @param[in]  action	-	Handle to the action. Must be a URI action.
 @param[out] buffer	-	A buffer for output the path string. Can be NULL.
 @param[in]  buflen	-	The length of the buffer, number of bytes. Can be 0.
 @note The URI path is always encoded in 7-bit ASCII.
		The return value always indicated number of bytes required for the buffer, even when there is
		no buffer specified, or the buffer size is less then required. In this case, the buffer will not
		be modified.
 @retval Number of bytes the URI path consumes, including trailing zeros.

</member>
        <member name="M:FPDFAction_GetDest(System.Void*,System.Void*)">
 Get destination of an action.
 @param[in] document -	Handle to the document..
 @param[in] action -	Handle to the action. It must be a GOTO or REMOTEGOTO action.
 @note In case of remote goto action, the application should first use FPDFAction_GetFilePath to
		get file path, then load that particular document, and use its document handle to call this
		function.
 @retval Handle to the destination data.

</member>
        <member name="M:FPDFAction_GetFilePath(System.Void*,System.Void*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
 Get file path of a remote goto action.
 @param[in]  action	-	Handle to the action. Must be a RMEOTEGOTO or LAUNCH action.
 @param[out] buffer	-	A buffer for output the path string. Can be NULL.
 @param[in]  buflen	-	The length of the buffer, number of bytes. Can be 0.
 @note The file path is output in local encoding.
		The return value always indicated number of bytes required for the buffer, even when there is
		no buffer specified, or the buffer size is less then required. In this case, the buffer will not
		be modified.
 @retval Number of bytes the file path consumes, including trailing zero.

</member>
        <member name="M:FPDFAction_GetType(System.Void*)">
 @name Action styles
@{

@brief Unsupported action type. 
@brief Go to a destination within current document. 
@brief Go to a destination within another document. 
@brief Universal Resource Identifier, including web pages and other Internet based resources. 
@brief Launch an application or open a file.
@}
Get type of an action.
@param[in] action -	Handle to the action.
@retval A type number as the action styles.

</member>
        <member name="M:FPDFBookmark_GetPageFirstLine(System.Void*,System.Void*,System.Int32)">
 Get first text line of the page, which can be used for alternative bookmark,
 if no bookmark is available.
 @param[in]  page		-	The page handle.
 @param[out] buffer	-	A buffer for output the text. Can be NULL.
 @param[in]  buflen	-	The length of the buffer, number of bytes. Can be 0.
 @note No matter on what platform, the title is always output in UTF-16LE encoding, which means the buffer 
		can be regarded as an array of WORD (on Intel and compatible CPUs), each WORD represent the Unicode of 
		a character (some special Unicode may take 2 WORDs). The string is followed by two bytes of zero 
		indicating end of the string.

		The return value always indicated number of bytes required for the buffer, even when there is
		no buffer specified, or the buffer size is less then required. In this case, the buffer will not
		be modified.
		
		TEMPORARY FUNCTION WILL BE OBSOLETE SOON!
 @retval Number of bytes the text line consumes, including trailing zeros.

</member>
        <member name="M:FPDFBookmark_GetDest(System.Void*,System.Void*)">
Get the destination associated with a bookmark item.
@param[in] document -	Handle to the document.
@param[in] bookmark -	Handle to the bookmark.
@retval Handle to the destination data. NULL if no destination is associated with this bookmark.

</member>
        <member name="M:FPDFBookmark_GetAction(System.Void*)">
 Get the action associated with a bookmark item.
 @param[in] bookmark -	Handle to the bookmark.
 @retval Handle to the action data. NULL if no action is associated with this bookmark. In this case, the 
		  application should try FPDFBookmark_GetDest.

</member>
        <member name="M:FPDFBookmark_GetTitle(System.Void*,System.Void*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
Get title of a bookmark.
@param[in] bookmark	-	Handle to the bookmark.
@param[out] buffer	-	A buffer for output the title. Can be NULL.
@param[in] buflen		-	The length of the buffer, number of bytes. Can be 0..
@note No matter on what platform, the title is always output in UTF-16LE encoding, which means the buffer 
		can be regarded as an array of WORD (on Intel and compatible CPUs), each WORD represent the Unicode of 
		a character (some special Unicode may take 2 WORDs). The string is followed by two bytes of zero 
		indicating end of the string.

		The return value always indicated number of bytes required for the buffer, even when there is
		no buffer specified, or the buffer size is less then required. In this case, the buffer will not
		be modified.
@retval Number of bytes the title consumes, including trailing zeros.

</member>
        <member name="M:FPDFBookmark_GetFontStyle(System.Void*)">
 @name Bookmark font styles
@{

@brief NORMAL 
@brief ITALIC 
@brief BOLD 
@brief BOLD ITALIC 
@}
Get designated font style for a bookmark item.
@param[in] bookmark -	Handle to the bookmark.
@retval A number indicating the font style, as the bookmark font styles.

</member>
        <member name="M:FPDFBookmark_GetColorRef(System.Void*)">
Get designated color of a bookmark item.
@param[in] bookmark -	Handle to the bookmark.
@retval A COLORREF value (0x00ggbbrr) for the bookmark item.

</member>
        <member name="M:FPDFBookmark_Find(System.Void*,System.UInt16!System.Runtime.CompilerServices.IsConst*)">
Find a bookmark in the document, using the bookmark title.
@param[in] document	-	Handle to the document. Returned by FPDF_LoadDocument or FPDF_LoadMemDocument.
@param[in] title		-	The UTF-16LE encoded Unicode string for the bookmark title to be searched. Can't be NULL.
@note It always returns the first found bookmark if more than one bookmarks have the same title.
@retval Handle to the found bookmark item. NULL if the title can't be found.

</member>
        <member name="M:FPDFBookmark_GetNextSibling(System.Void*,System.Void*)">
Get next bookmark item on the same level.
@param[in] document -	Handle to the document. Returned by FPDF_LoadDocument or FPDF_LoadMemDocument.
@param[in] bookmark -	Handle to the current bookmark. Cannot be NULL.
@retval Handle to the next bookmark item on the same level. NULL if this is the last bookmark on this level.

</member>
        <member name="M:FPDFBookmark_GetFirstChild(System.Void*,System.Void*)">
Get first child of a bookmark item, or first top level bookmark item.
@param[in] document -	Handle to the document. Returned by FPDF_LoadDocument or FPDF_LoadMemDocument.
@param[in] bookmark -	Handle to the current bookmark. Can be NULL if you want to get the first top level item.
@retval Handle to the first child or top level bookmark item. NULL if no child or top level bookmark found.

</member>
        <member name="M:FPDF_SetSystemFontFile(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Make use of a system font. The font file must be in TrueType or Type1 format and must be
 encoded in a standard encoding system.
 Available for embedded Linux system only.
 @param[in] file_path	-	The full path of the font file.
 @retval	Non-zero for success. Zero for error.


</member>
        <member name="M:FPDF_SetGlyphProvider(FPDF_GLYPHPROVIDER*)">
 Make use of a custom glyph bitmap provider.
 Not available on Desktop Windows system.
 @param[in] pProvider	-	Pointer to a provider structure. This structure must be available all the time
							(better put it in static data). And all member interfaces of this structure
							should be properly set and implemented.
 @retval	None.

</member>
        <member name="M:FPDF_SetModulePath(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Set the folder path for module files (like the FPDFCJK.BIN).
@param[in] module_name	-	Name of the module. Currently please use NULL (0) only.
@param[in] folder_name	-	Name of the folder. For example: "C:\\program files\\FPDFSDK".
@retval	None.

</member>
        <member name="M:FPDF_SetErrorHandler(=FUNC:System.Void(System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*))">
 Set a call back function when FPDFSDK has some error to report.
 @param[in] func	-	Pointer to the error handler function.
 @note		Currently only two error codes are defined (see above).
 @retval	None.


</member>
        <member name="D:FPDF_ErrorHandler">
Out of memory. The error handler should quit the application, or use long jump to get out of current rendering.
Missing PDF feature. The error handler can safely continue with other rendering.
</member>
        <member name="M:FPDF_FreeMemory(System.Void*)">
 Free a memory area allocated by Foxit SDK.
 @param[in] p		-	The pointer. Should not be NULL.
 @retval	None.
 @note		In case FPDFSDK allocated some memory for user application, the user application
			must free it to avoid memory leakage. And the application must call FPDF_FreeMemory
			function to do that. Do NOT use c/c++ memory free() function or other similar functions.

</member>
        <member name="M:FPDF_AllocMemory(System.UInt32!System.Runtime.CompilerServices.IsLong)">
 Allocate memory block in FPDFSDK. This memory can be freed by FPDF_FreeMemory function.
 @param[in] size		-	Byte size of requested memory block. Can not be zero.
 @note		Some FPDFSDK interface may require application to allocate memory for internal use of
			FPDFSDK. In this case application must call this function to allocate memory, don't
			use malloc() or other memory allocator.
			If an error handler installed and exception/long jump is used in the out of memory handling,
			this function might never return if no memory available.
 @retval	The allocated pointer. NULL if memory not available.

</member>
        <member name="M:FPDFBitmap_Destroy(System.Void*)">
 Destroy an FXDIB and release all related buffers. 
 @param[in] bitmap		-	Handle to the bitmap. Returned by FPDFBitmap_Create function.
 @note		This function will not destroy any external buffer.
 @retval	None.


</member>
        <member name="M:FPDFBitmap_GetFormat(System.Void*)">
Get the format of the bitmap.
@param[in] bitmap		-	Handle to the bitmap. Returned by FPDFBitmap_Create function.
@retval	The format of the the bitmap.

</member>
        <member name="M:FPDFBitmap_GetStride(System.Void*)">
Get number of bytes for each scan line in the bitmap buffer.
@param[in] bitmap		-	Handle to the bitmap. Returned by FPDFBitmap_Create function.
@retval	The number of bytes for each scan line in the bitmap buffer.

</member>
        <member name="M:FPDFBitmap_GetHeight(System.Void*)">
Get height of an FXDIB.
@param[in] bitmap		-	Handle to the bitmap. Returned by FPDFBitmap_Create function.
@retval	The number of pixels in a vertical line of the bitmap.

</member>
        <member name="M:FPDFBitmap_GetPaletteSize(System.Void*)">
Get palette size of a bitmap
@param[in] bitmap              -       Handle to the bitmap.Returned by FPDFImageObj_GetBitmap function.
@retval        The  palette size of a bitmap.

</member>
        <member name="M:FPDFBitmap_GetPalette(System.Void*)">
Get palette of a bitmap
@param[in] bitmap              -       Handle to the bitmap.Returned by FPDFImageObj_GetBitmap function.
@retval        The  palette of a bitmap.

</member>
        <member name="M:FPDFBitmap_GetWidth(System.Void*)">
Get width of an FXDIB.
@param[in] bitmap		-	Handle to the bitmap. Returned by FPDFBitmap_Create function.
@retval	The number of pixels in a horizontal line of the bitmap.

</member>
        <member name="M:FPDFBitmap_GetBuffer(System.Void*)">
 Get data buffer of an FXDIB
 @param[in] bitmap		-	Handle to the bitmap. Returned by FPDFBitmap_Create function.
 @note		Applications can use this function to get the bitmap buffer pointer, then manipulate any color
			and/or alpha values for any pixels in the bitmap.
 @retval	The pointer to the first byte of the bitmap buffer.

</member>
        <member name="M:FPDFBitmap_FillRect(System.Void*,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
 Fill a rectangle area in an FXDIB.
 @param[in] bitmap		-	The handle to the bitmap. Returned by FPDFBitmap_Create function.
 @param[in] left		-	The left side position. Starting from 0 at the left-most pixel.
 @param[in] top		-	The top side position. Starting from 0 at the top-most scan line.
 @param[in] width		-	Number of pixels to be filled in each scan line.
 @param[in] height		-	Number of scan lines to be filled.
 @param[in] red		-	A number from 0 to 255, identifying the red intensity.
 @param[in] green		-	A number from 0 to 255, identifying the green intensity.
 @param[in] blue		-	A number from 0 to 255, identifying the blue intensity.
 @param[in] alpha		-	(Only if the alpha channeled is used when bitmap created) A number from 0 to 255,
							identifying the alpha value.
 @note
			This function set the color and (optionally) alpha value in specified region of the bitmap.
			NOTE: If alpha channel is used, this function does NOT composite the background with the source color,
			instead the background will be replaced by the source color and alpha.
			If alpha channel is not used, the "alpha" parameter is ignored.
 @retval	None.


</member>
        <member name="M:FPDFBitmap_CreateEx(System.Int32,System.Int32,System.Int32,System.Void*,System.Int32)">
 @name More DIB formats
@{

Gray scale bitmap, one byte per pixel. 
3 bytes per pixel, byte order: blue, green, red. 
4 bytes per pixel, byte order: blue, green, red, unused. 
4 bytes per pixel, byte order: blue, green, red, alpha. 
@}
 Create a Foxit Device Independent Bitmap (FXDIB)
 @param[in] width		-	Number of pixels in a horizontal line of the bitmap. Must be greater than 0.
 @param[in] height		-	Number of pixels in a vertical line of the bitmap. Must be greater than 0.
 @param[in] format		-	A number indicating for bitmap format, as defined above.
 @param[in] first_scan	-	A pointer to the first byte of first scan line, for external buffer
							only. If this parameter is NULL, then the SDK will create its own buffer.
 @param[in] stride		-	Number of bytes for each scan line, for external buffer only..
 @note		Similar to FPDFBitmap_Create function, with more formats and external buffer supported. 
			Bitmap created by this function can be used in any place that a FPDF_BITMAP handle is 
			required. 

			If external scanline buffer is used, then the application should destroy the buffer
			by itself. FPDFBitmap_Destroy function will not destroy the buffer.
 @retval	The created bitmap handle, or NULL if parameter error or out of memory.


</member>
        <member name="M:FPDFBitmap_Create(System.Int32,System.Int32,System.Int32)">
 Create a Foxit Device Independent Bitmap (FXDIB).
 @param[in] width		-	Number of pixels in a horizontal line of the bitmap. Must be greater than 0.
 @param[in] height		-	Number of pixels in a vertical line of the bitmap. Must be greater than 0.
 @param[in] alpha		-	A flag indicating whether alpha channel is used. Non-zero for using alpha, zero for not using.
 @note
			An FXDIB always use 4 byte per pixel. The first byte of a pixel is always double word aligned.
			Each pixel contains red (R), green (G), blue (B) and optionally alpha (A) values.
			The byte order is BGRx (the last byte unused if no alpha channel) or BGRA.
			
			The pixels in a horizontal line (also called scan line) are stored side by side, with left most
			pixel stored first (with lower memory address). Each scan line uses width*4 bytes.

			Scan lines are stored one after another, with top most scan line stored first. There is no gap
			between adjacent scan lines.

			This function allocates enough memory for holding all pixels in the bitmap, but it doesn't 
			initialize the buffer. Applications can use FPDFBitmap_FillRect to fill the bitmap using any color.
 @retval	The created bitmap handle, or NULL if parameter error or out of memory.

</member>
        <member name="M:FPDF_PageToDevice(System.Void*,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Int32*,System.Int32*)">
 Convert the page coordinate of a point to screen coordinate.
 @param[in] page		-	Handle to the page. Returned by FPDF_LoadPage function.
 @param[in] start_x	-	Left pixel position of the display area in the device coordinate.
 @param[in] start_y	-	Top pixel position of the display area in the device coordinate.
 @param[in] size_x		-	Horizontal size (in pixels) for displaying the page.
 @param[in] size_y		-	Vertical size (in pixels) for displaying the page.
 @param[in] rotate		-	Page orientation: 0 (normal), 1 (rotated 90 degrees clockwise),
							 2 (rotated 180 degrees), 3 (rotated 90 degrees counter-clockwise).
 @param[in] page_x		-	X value in page coordinate, for the point to be converted.
 @param[in] page_y		-	Y value in page coordinate, for the point to be converted.
 @param[in] device_x	-	A pointer to an integer receiving the result X value in device coordinate.
 @param[in] device_y	-	A pointer to an integer receiving the result Y value in device coordinate.
 @note
			See comments of FPDF_DeviceToPage() function.

 @retval	None.

</member>
        <member name="M:FPDF_DeviceToPage(System.Void*,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double*,System.Double*)">
 Convert the screen coordinate of a point to page coordinate.
 @param[in] page		-	Handle to the page. Returned by FPDF_LoadPage function.
 @param[in] start_x	-	Left pixel position of the display area in the device coordinate.
 @param[in] start_y	-	Top pixel position of the display area in the device coordinate.
 @param[in] size_x		-	Horizontal size (in pixels) for displaying the page.
 @param[in] size_y		-	Vertical size (in pixels) for displaying the page.
 @param[in] rotate		-	Page orientation: 0 (normal), 1 (rotated 90 degrees clockwise),
							 2 (rotated 180 degrees), 3 (rotated 90 degrees counter-clockwise).
 @param[in] device_x	-	X value in device coordinate, for the point to be converted.
 @param[in] device_y	-	Y value in device coordinate, for the point to be converted.
 @param[in] page_x		-	A Pointer to a double receiving the converted X value in page coordinate.
 @param[in] page_y		-	A Pointer to a double receiving the converted Y value in page coordinate.
 @note
			The page coordinate system has its origin at left-bottom corner of the page, with X axis goes along
			the bottom side to the right, and Y axis goes along the left side upward. NOTE: this coordinate system 
			can be altered when you zoom, scroll, or rotate a page, however, a point on the page should always have 
			the same coordinate values in the page coordinate system. 

			The device coordinate system is device dependent. For screen device, its origin is at left-top
			corner of the window. However this origin can be altered by Windows coordinate transformation
			utilities. You must make sure the start_x, start_y, size_x, size_y and rotate parameters have exactly
			same values as you used in FPDF_RenderPage() function call.
 @retval	None.


</member>
        <member name="M:FPDF_CloseDocument(System.Void*)">
 Close a loaded PDF document.
 @param[in] document	-	Handle to the loaded document.
 @retval	None.


</member>
        <member name="M:FPDF_ClosePage(System.Void*)">
 Close a loaded PDF page.
 @param[in] page		-	Handle to the loaded page.
 @retval	None.


</member>
        <member name="M:FPDF_QuickDrawPage(System.Void*,System.Void*,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
 Draw a thumbnail of a page into a bitmap.
 @param[in] bitmap		-	Handle to the device independent bitmap (as the output buffer).
							Bitmap handle can be created by FPDFBitmap_Create function.
 @param[in] page		-	Handle to the page. Returned by FPDF_LoadPage function.
 @param[in] start_x	-	Left pixel position of the display area in the device coordinate.
 @param[in] start_y	-	Top pixel position of the display area in the device coordinate.
 @param[in] size_x		-	Horizontal size (in pixels) for displaying the page.
 @param[in] size_y		-	Vertical size (in pixels) for displaying the page.
 @param[in] rotate		-	Page orientation: 0 (normal), 1 (rotated 90 degrees clockwise),
							 2 (rotated 180 degrees), 3 (rotated 90 degrees counter-clockwise).
 @param[in] flags		-	Currently must be zero.
 @note		This functions draws a very low-resolution thumbnail of a page, sometimes with
			inaccurate shape or position. The result thumbnail is meant for a very rough preview
			of the page contents, just giving user some idea about how the page looks like.
			The thumbnail is often useful in multi-threaded or progressive environment, the
			application can first display the low-resolution thumbnail, start to respond to
			user input, and a higher resolution thumbnail can be generated by FPDF_RenderPageBitmap 
			function.
 @retval	None.

</member>
        <member name="M:FPDF_RenderPageBitmap(System.Void*,System.Void*,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
 Render contents in a page to a device independent bitmap
 @param[in] bitmap		-	Handle to the device independent bitmap (as the output buffer).
							Bitmap handle can be created by FPDFBitmap_Create function.
 @param[in] page		-	Handle to the page. Returned by FPDF_LoadPage function.
 @param[in] start_x	-	Left pixel position of the display area in the bitmap coordinate.
 @param[in] start_y	-	Top pixel position of the display area in the bitmap coordinate.
 @param[in] size_x		-	Horizontal size (in pixels) for displaying the page.
 @param[in] size_y		-	Vertical size (in pixels) for displaying the page.
 @param[in] rotate		-	Page orientation: 0 (normal), 1 (rotated 90 degrees clockwise),
							2 (rotated 180 degrees), 3 (rotated 90 degrees counter-clockwise).
 @param[in] flags		-	0 for normal display, or combination of flags defined above.
 @retval	None.


</member>
        <member name="M:FPDF_RenderPage(HDC__*,System.Void*,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
 @name The result of the process which check linearized to be rendered.
@{

Set if annotations are to be rendered. 
Set if using text rendering optimized for LCD display. 
Don't use the native text output available on some platforms Applicable to desktop Windows systems only.
Grayscale output.
Form Rendering. 
Set if you want to get some debug info.  Please discuss with Foxit first if you need to collect debug info.
Set if you don't want to catch exception.
@}
 Render contents in a page to a device (screen, bitmap, or printer). This function is only supported on Windows system. 
 @param[in] dc			-	Handle to device context.
 @param[in] page		-	Handle to the page. Returned by FPDF_LoadPage function.
 @param[in] start_x	-	Left pixel position of the display area in the device coordinate.
 @param[in] start_y	-	Top pixel position of the display area in the device coordinate.
 @param[in] size_x		-	Horizontal size (in pixels) for displaying the page.
 @param[in] size_y		-	Vertical size (in pixels) for displaying the page.
 @param[in] rotate		-	Page orientation: 0 (normal), 1 (rotated 90 degrees clockwise),
							2 (rotated 180 degrees), 3 (rotated 90 degrees counter-clockwise).
 @param[in] flags		-	0 for normal display, or combination of flags defined above.
 @retval	None.


</member>
        <member name="M:FPDF_EnumPageSize(System.Void*,=FUNC:System.Void(System.Int32,System.Double,System.Double))">
Enumerating all pages within the document.
@param[in] document	-	Handle to document. Returned by FPDF_LoadDocument function.
@param[in] callback	-	A pointer to a callback function.
@retval	None.

</member>
        <member name="D:FPDF_ENUMPAGESIZEPROC">
 Declares of a pointer type to the callback function for the FPDF_EnumPageSize method.
			page_index	-	Page index, zero for the first page.
			width		-	The page width.
			height		-	The page height.
 @retval	None. 		

</member>
        <member name="M:FPDF_GetPageSizeByIndex(System.Void*,System.Int32,System.Double*,System.Double*)">
 Get the size of a page by index.
 @param[in] document	-	Handle to document. Returned by FPDF_LoadDocument function.
 @param[in] page_index	-	Page index, zero for the first page.
 @param[in] width		-	Pointer to a double receiving the page width (in points).
 @param[in] height		-	Pointer to a double receiving the page height (in points).
 @retval	Non-zero for success. 0 for error (document or page not found).


</member>
        <member name="M:FPDF_GetPageHeight(System.Void*)">
 Get page height.
 @param[in] page	-	Handle to the page. Returned by FPDF_LoadPage function.
 @retval	Page height (excluding non-displayable area) measured in points.
			One point is 1/72 inch (around 0.3528 mm)


</member>
        <member name="M:FPDF_GetPageWidth(System.Void*)">
 Get page width.
 @param[in] page	-	Handle to the page. Returned by FPDF_LoadPage function.
 @retval	Page width (excluding non-displayable area) measured in points.
			One point is 1/72 inch (around 0.3528 mm).


</member>
        <member name="M:FPDF_LoadPage(System.Void*,System.Int32)">
 Load a page inside a document.
 @param[in] document	-	Handle to document. Returned by FPDF_LoadDocument function.
 @param[in] page_index	-	Index number of the page. 0 for the first page.
 @note		Loaded page can be rendered to devices using FPDF_RenderPage function.
			Loaded page can be closed by FPDF_ClosePage.
 @retval	A handle to the loaded page. If failed, NULL is returned.

</member>
        <member name="M:FPDF_GetPageCount(System.Void*)">
Get total number of pages in a document.
@param[in] document	-	Handle to document. Returned by FPDF_LoadDocument function.
@retval	Total number of pages in the document.

</member>
        <member name="M:FPDF_GetDocPermissions(System.Void*)">
 Get file permission flags of the document.
 @param[in] document	-	Handle to document. Returned by FPDF_LoadDocument function.
 @retval	A 32-bit integer indicating permission flags. Please refer to PDF Reference for
			detailed description. If the document is not protected, 0xffffffff will be returned.

</member>
        <member name="M:FPDF_GetLastError">
 @name Last error code
@{

@brief No error. 
@brief Unknown error. 
@brief Unknown error. 
@brief File not found or could not be opened. 
@brief Password required or incorrect password. 
@brief Unsupported security scheme. 
@brief Page not found or content error. 
@brief Parameter error. 
@}
 Get last error code when an SDK function failed.
 @note		If the previous SDK call succeeded, the return value of this function
			is not defined.
 @retval	A 32-bit integer indicating error codes (defined above).

</member>
        <member name="M:FPDF_LoadCustomDocument(FPDF_FILEACCESS*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
@}
 Load PDF document from a custom access descriptor.
 @param[in] pFileAccess	-	A structure for access the file.
 @param[in] password		-	Optional password for decrypting the PDF file.
 @note		The application should maintain the file resources being valid until the PDF document close.
			Loaded document can be closed by FPDF_CloseDocument.
 @retval	A handle to the loaded document. If failed, NULL is returned.

</member>
        <member name="M:FPDF_LoadMemDocument(System.Void!System.Runtime.CompilerServices.IsConst*,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Open and load a PDF document from memory.
 @param[in] data_buf	-	Pointer to a buffer containing the PDF document.
 @param[in] size		-	Number of bytes in the PDF document.
 @param[in] password	-	A string used as the password for PDF file. 
							If no password needed, empty or NULL can be used.
 @note		The memory buffer must remain valid when the document is open.
			Loaded document can be closed by FPDF_CloseDocument.
			If this function fails, you can use FPDF_GetLastError() to retrieve
			the reason why it fails.
 @retval	A handle to the loaded document. If failed, NULL is returned.

</member>
        <member name="M:FPDF_LoadDocument(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Open and load a PDF document.
 @param[in] file_path	-	Path to the PDF file (including extension).
 @param[in] password	-	A string used as the password for PDF file. 
							If no password needed, empty or NULL can be used.
 @note		Loaded document can be closed by FPDF_CloseDocument.
			If this function fails, you can use FPDF_GetLastError() to retrieve
			the reason why it fails.
 @retval	A handle to the loaded document. If failed, NULL is returned.

</member>
        <member name="M:FPDF_UnlockDLL(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 Unlock the DLL using license key info received from Foxit.
 @param[in] license_id		-	A string received from Foxit identifying the SDK license.
 @param[in] unlock_code	-	A string received from Foxit for unlocking the DLL.
 @note		For SDK evaluators, this function call is not required, then all
			rendered pages will come with an evaluation mark.
			For purchased SDK customers, this should be the first function
			called before any other functions to be called.
 @retval	None.

</member>
        <member name="M:FPDF_DestroyLibrary">
 Release all resources allocated by the FPDFSDK library.
 @note		You can call this function to release all memory blocks allocated by the library. 
			After this function is called, you should not call any PDF processing functions.
 @retval	None.

</member>
        <member name="M:FPDF_GetModuleMgr">
Get the module of this DLL.
@retval	FPDF_MODULEMGR	-	The handle of this module.  

</member>
        <member name="M:FPDF_InitLibrary(System.Void*)">
On Windows system, functions are exported in a DLL 
Initialize the FPDFSDK library 
@param[in] hInstance	-	For WIN32 system only: the instance of the executable or DLL module.
@note		You have to call this function before you can call any PDF processing functions.
@retval	None.

</member>
        <member name="D:FPDF_STRING">
 For Windows programmers: for most case it's OK to treat FPDF_WIDESTRING as Windows unicode string,
		 however, special care needs to be taken if you expect to process Unicode larger than 0xffff.
 For Linux/Unix programmers: most compiler/library environment uses 4 bytes for a Unicode character,
		you have to convert between FPDF_WIDESTRING and system wide string by yourself.

</member>
        <member name="D:FPDF_RESULT">
Result type
</member>
        <member name="D:FPDF_WIDESTRING">
Foxit PDF SDK always use UTF-16LE encoding wide string, each character use 2 bytes (except subrogation), with low byte first. 
</member>
        <member name="D:FPDF_BYTESTRING">
FPDFSDK may use three types of strings: byte string, wide string (UTF-16LE encoded), and platform dependent string
</member>
        <member name="D:FPDF_WCHAR">
String types
</member>
        <member name="D:FPDF_BOOL">
Basic data types
</member>
        <member name="D:FPDF_DOCUMENT">
PDF types
</member>
        <member name="D:FPDF_MODULEMGR">
Data types
</member>
        <member name="T:_EXCEPTION_DISPOSITION">
@addtogroup FPDFVIEW
Header file for the view module
@{

(C) 2011 Foxit Corporation. All Rights Reserved.
 * The following code is copyrighted and contains proprietary information and trade secrets of Foxit Corporation.
 * Functions in this header file, require "view" module to be enabled in your SDK license.
 * \file
 * \author	Foxit Corporation
 * \brief	Header file for the view module - to render PDF documents and obtain basic PDF information.
 * \note	If you want to purchase Foxit PDF SDK license and use ANY of the following functions, please
 *			request for enabling view module explicitly.
 * \version 3.1.1


@addtogroup FPDFTEXT
Header file for the text module
@{

(C) 2011 Foxit Corporation. All Rights Reserved.
 * The following code is copyrighted and contains proprietary information and trade secrets of Foxit Corporation.
 * Functions in this header file, require "text" module to be enabled in your SDK license.
 * \file
 * \author	Foxit Corporation
 * \brief	Header file for the text module - for text extraction.
 * \note	If you want to purchase Foxit PDF SDK license and use ANY of the following functions, please
 *			request for enabling text module explicitly.
 * \version 3.1.1

@addtogroup FPDFVIEW
Header file for the view module
@{

(C) 2011 Foxit Corporation. All Rights Reserved.
 * The following code is copyrighted and contains proprietary information and trade secrets of Foxit Corporation.
 * Functions in this header file, require "view" module to be enabled in your SDK license.
 * \file
 * \author	Foxit Corporation
 * \brief	Header file for the view module - to render PDF documents and obtain basic PDF information.
 * \note	If you want to purchase Foxit PDF SDK license and use ANY of the following functions, please
 *			request for enabling view module explicitly.
 * \version 3.1.1

</member>
        <member name="T:Foxit.PDF.Viewer.Zoom">
            <summary>
Specifies the zoom mode types. 
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.Zoom.ZoomPercent">
            <summary>
Shows the page at a zoom factor specified by the user.
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.Zoom.ActualSize">
            <summary>
Shows the page in its actual size.
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.Zoom.FitHeight">
            <summary>
Make the page to fit on the display only vertical.
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.Zoom.FitWidth">
            <summary>
Make the page to fit on the display only horizontal.
</summary>
        </member>
        <member name="F:Foxit.PDF.Viewer.Zoom.FitPage">
            <summary>
Make the page to fit on the display either vertical or horizontal.
</summary>
        </member>
        <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDFText_LoadPage(System.Void*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:FPDF_CreateNewDocument'. -->
    </members>
</doc>